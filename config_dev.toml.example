# Linkedevents environment configuration
# This file defines a set of (environment) variables that configure most
# of the functionality of linkedevents. In order for linkedevents to read
# this file, rename it to `config_dev.toml`. As the name implies, this
# file is supposed to be used only in development. For production use
# we recommend setting the environment variables using the facilities
# of your runtime environment.
# Linkedevents reads this file by itself. However, it can also be
# used in conjunction with the included docker-compose.yml. Then
# you don't need to inject the file into the container. Instead
# Docker defines environment variables that linkedevents will read.
# Note that although this file has the extension .toml, it is actually
# read by a parser only capable of reading key=value pairs + comments.
# We use the .toml extension to indicate that it is readable by TOML
# parser.
# Following are the settings and their explanations, with example values
# that might be useful for development:

# Whether to run Django in debug mode
# Django setting: DEBUG https://docs.djangoproject.com/en/2.2/ref/settings/#debug
DEBUG=True

# Namespace ID used for events added through the API. All events added
# through api will have their "data_source" field set to this value and
# their identifier will be prefixed by this value.
#SYSTEM_DATA_SOURCE_ID=ledev

# Languages that this Linkedevents instance will support. This affects
# several things and cannot be changed nilly-willy. Most importantly,
# you will need to run `manage.py sync_translation_fields` after
# changing this. You will also need to rebuild your elasticsearch
# indexes: `manage.py rebuild_indexes`, but only if you are actually
# running elasticsearch, ie. specifying ELASTICSEARCH_URL
# Django setting: LANGUAGES https://docs.djangoproject.com/en/2.2/ref/settings/#languages
#LANGUAGES=fi,sv,en,zh-hans,ru,ar

# Configures database for Linkedevents using URL style. Format is:
# postgis://USER:PASSWORD@HOST:PORT/NAME
# Unused components may be left out, only Postgis is supported
# The example below configures Linkedevents to use local PostgreSQL database
# called "linkedevents", connecting same as username as Django is running as.
# Django setting: DATABASES (but not directly) https://docs.djangoproject.com/en/2.2/ref/settings/#databases
#DATABASE_URL=postgis:///linkedevents

# Linkedevents uses JWT tokens for authentication. This settings Specifies
# the value that must be present in the "aud"-key of the token presented
# by a client when making an authenticated request. Linkedevents uses this
# key for verifying that the token was meant for accessing this particular
# Linkedevent instance (the tokens are signed, see below).
# Does not correspond to standard Django setting
TOKEN_AUTH_ACCEPTED_AUDIENCE=string-identifying-this-linkedevent-instance

# This key is used by Linkedevents to verify the JWT token is from trusted
# Identity Provider (OpenID terminology). The provider must have signed
# the JWT TOKEN using this shared secret
# Does not correspond to standard Django setting
TOKEN_AUTH_SHARED_SECRET=abcdefghacbdefgabcdefghacbdefgabcdefghacbdefgabcdefghacbdefgabcdefghacbdefg

# Linkedevents uses Elasticsearch for generating the results available
# through /search endpoint. For this to work you will need an elasticsearch
# instance running. This is handily available through docker-compose.yml
# This settings specifies the root url for your elasticsearch instance.
# Note that Linkedevents accesses Elasticsearch through django-haystack
# and does not support versions beyond 5.x. We've only tested using 1.7 (yes!)
# Does not correspond to standard Django setting
ELASTICSEARCH_URL=http://localhost:9200/

# Secret used for various functions within Django. This setting is
# mandatory for Django, but Linkedevents will generate a key, if it is not
# defined here. Currently Linkedevents does not use any functionality that
# needs this.
# Django setting: SECRET_KEY https://docs.djangoproject.com/en/2.2/ref/settings/#secret-key
#SECRET_KEY=mD0lDi30t3IJ83utHW8yFzV4p3J9SKv0VDSiZQ6wHhdbXPIeHNX2O0YRaPqC8utuDpZpcTAxnZ3n3e6q

# List of Host-values, that Linkedevents will accept in requests.
# This setting is a Django protection measure against HTTP Host-header attacks
# https://docs.djangoproject.com/en/2.2/topics/security/#host-headers-virtual-hosting
# Specified as a comma separated list of allowed values. Note that this does
# NOT matter if you are running with DEBUG
# Django setting: ALLOWED_HOSTS https://docs.djangoproject.com/en/2.2/ref/settings/#allowed-hosts
#ALLOWED_HOSTS=api.hel.ninja,linkedevents-api.hel.ninja

# List of tuples (or just e-mail addresses) specifying Administrators of this
# Linkedevents instance. Django uses this only when logging is configured to
# send exceptions to admins. Linkedevents does not do this. Still you may want
# to set this for documentation
# Django setting: ADMINS https://docs.djangoproject.com/en/2.2/ref/settings/#admins
ADMINS=admin@this.linkedevents.instance,another-admin@this.linkedevents

# Cookie prefix is added to the every cookie set by linkedevents. These are
# mostly used when accessing the internal Django admin site. This applies
# to django session cookie and csrf cookie
# Django setting: prepended to CSRF_COOKIE_NAME and SESSION_COOKIE_NAME 
COOKIE_PREFIX=ledev

# Django INTERNAL_IPS setting allows some debugging aids for the addresses
# specified here
# DJango setting: INTERNAL_IPS https://docs.djangoproject.com/en/2.2/ref/settings/#internal-ips
INTERNAL_IPS=127.0.0.1

# Specifies a header that is trusted to indicate that the request was using
# https while traversing over the Internet at large. This is used when
# a proxy terminates the TLS connection and forwards the request over
# a secure network. Specified using a tuple.
# Django setting: SECURE_PROXY_SSL_HEADER https://docs.djangoproject.com/en/2.2/ref/settings/#secure-proxy-ssl-header
#SECURE_PROXY_SSL_HEADER=('HTTP_X_FORWARDED_PROTO', 'https')

# Media root is the place in file system where Django and, by extension
# Linkedevents stores "uploaded" files. This means any and all files
# that are inputted through importers or API
# Django setting: MEDIA_ROOT https://docs.djangoproject.com/en/2.2/ref/settings/#media-root
#MEDIA_ROOT=/home/linkedevents/media

# Static root is the place where linkedevents will install any static
# files that need to be served to clients. For linkedevents this is mostly
# JS and CSS for the API exploration interface + admin
# Django setting: STATIC_ROOT
#STATIC_ROOT=/home/linkedevents/static

# Media URL is address (URL) where users can access files in MEDIA_ROOT
# through http. Ie. where your uploaded files are publicly accessible.
# In the simple case this is a relative URL to same server as API
# Django setting: MEDIA_URL https://docs.djangoproject.com/en/2.2/ref/settings/#media-url
MEDIA_URL=/media/

# Static URL is address (URL) where users can access files in STATIC_ROOT
# through http. Same factors apply as to MEDIA_URL
# Django setting: STATIC_URL https://docs.djangoproject.com/en/2.2/ref/settings/#static-url
STATIC_URL=/static/

# Specifies that Django is to use `X-Forwarded-Host` as it would normally
# use the `Host`-header. This is necessary when `Host`-header is used for
# routing the requests in a network of reverse proxies. `X-Forwarded-Host`
# is then used to carry the Host-header value supplied by the origin client.
# This affects how ALLOWED_HOSTS behaves, as well.
# Django setting: https://docs.djangoproject.com/en/2.2/ref/settings/#use-x-forwarded-host
# TRUST_X_FORWARDED_HOST=False

# Sentry is an error tracking sentry (sentry.io) that can be self hosted
# or purchased as PaaS. SENTRY_DSN setting specifies the URL where reports
# for this Linkedevents instance should be sent. You can find this in
# your Sentry interface (or through its API)
#SENTRY_DSN=http://your.sentry.here/fsdafads/13

# Sentry environment is an optional tag that can be included in sentry
# reports. It is used to separate deployments within Sentry UI
SENTRY_ENVIRONMENT=local-development-unconfigured

# Whitenoise enables WSGI apps (and thus Django) to serve any static
# files directly from Python code. This makes it easier to run Linkedevents
# from container, as there is no need to setup static files serving
# or uploading them to CDN. Instead you should have a HTTP cache
# in front of Linkedevents, if it becomes heavily loaded
# ENABLE_WHITENOISE=False

# Lippupiste has a private API for accessing event data. If you have
# access to this API, enter your access URL here. Note that you will
# very likely need to customize the importer as well.
# LIPPUPISTE_EVENT_API_URL=https://your.lippupiste.url.here

# Mailgun API credentials
#MAIL_MAILGUN_KEY=key
#MAIL_MAILGUN_DOMAIN=do.main.com
#MAIL_MAILGUN_API=https://mail.gun.api/
