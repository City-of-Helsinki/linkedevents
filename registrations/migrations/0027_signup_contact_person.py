# Generated by Django 3.2.22 on 2023-11-01 11:59

import django.db.models.deletion
from django.db import migrations, models


def forwards_func(apps, schema_editor):
    contact_person_model = apps.get_model("registrations", "SignUpContactPerson")
    signup_group_model = apps.get_model("registrations", "SignUpGroup")
    signup_model = apps.get_model("registrations", "SignUp")

    shared_fields = [
        "first_name",
        "last_name",
        "email",
        "phone_number",
        "native_language",
        "service_language",
        "membership_number",
        "notifications",
    ]

    contact_persons = []

    for signup_group in (
        signup_group_model.objects.filter(signups__isnull=False).only("pk").distinct()
    ):
        signup = (
            signup_model.objects.filter(signup_group_id=signup_group.pk)
            .order_by("-responsible_for_group")
            .only(*shared_fields)
            .first()
        )

        if not signup:
            continue  # signup deleted while looping the groups

        contact_persons.append(
            contact_person_model(
                signup_group_id=signup_group.pk,
                **{field: getattr(signup, field) for field in shared_fields},
            )
        )

    for signup in signup_model.objects.filter(signup_group_id__isnull=True).only(
        "pk", *shared_fields
    ):
        contact_persons.append(
            contact_person_model(
                signup_id=signup.pk,
                **{field: getattr(signup, field) for field in shared_fields},
            )
        )

    contact_person_model.objects.bulk_create(contact_persons)


def backwards_func(apps, schema_editor):
    contact_person_model = apps.get_model("registrations", "SignUpContactPerson")
    signup_model = apps.get_model("registrations", "SignUp")

    shared_fields = [
        "email",
        "phone_number",
        "native_language",
        "service_language",
        "membership_number",
        "notifications",
    ]

    update_signups = []

    for contact_person in contact_person_model.objects.all().select_related("signup"):
        if contact_person.signup_group_id:
            signups = signup_model.objects.filter(
                signup_group_id=contact_person.signup_group_id
            )
        else:
            signups = [contact_person.signup]

        for index, signup in enumerate(signups):
            if index == 0 and signup.signup_group_id:
                # Every group should have one responsible signup. The UI automatically
                # designates the first signup as the responsible one, so we do the same here.
                signup.responsible_for_group = True

            for field in shared_fields:
                setattr(signup, field, getattr(contact_person, field))

            update_signups.append(signup)

    signup_model.objects.bulk_update(
        update_signups, shared_fields + ["responsible_for_group"]
    )


class Migration(migrations.Migration):
    dependencies = [
        ("events", "0097_eventfulltext"),
        ("registrations", "0026_unique_seat_reservation_and_attendee_status_index"),
    ]

    operations = [
        migrations.CreateModel(
            name="SignUpContactPerson",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=50,
                        null=True,
                        verbose_name="First name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=50,
                        null=True,
                        verbose_name="Last name",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        default=None,
                        max_length=254,
                        null=True,
                        verbose_name="E-mail",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=18,
                        null=True,
                        verbose_name="Phone number",
                    ),
                ),
                (
                    "membership_number",
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=50,
                        null=True,
                        verbose_name="Membership number",
                    ),
                ),
                (
                    "notifications",
                    models.CharField(
                        choices=[
                            ("none", "No Notification"),
                            ("sms", "SMS"),
                            ("email", "E-Mail"),
                            ("sms and email", "Both SMS and email."),
                        ],
                        default="none",
                        max_length=25,
                        verbose_name="Notification type",
                    ),
                ),
                (
                    "native_language",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="signup_contact_person_native_language",
                        to="events.language",
                    ),
                ),
                (
                    "service_language",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="signup_contact_person_service_language",
                        to="events.language",
                    ),
                ),
                (
                    "signup",
                    models.OneToOneField(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contact_person",
                        to="registrations.signup",
                    ),
                ),
                (
                    "signup_group",
                    models.OneToOneField(
                        default=None,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contact_person",
                        to="registrations.signupgroup",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RunPython(forwards_func, backwards_func),
        migrations.RemoveField(
            model_name="signup",
            name="email",
        ),
        migrations.RemoveField(
            model_name="signup",
            name="membership_number",
        ),
        migrations.RemoveField(
            model_name="signup",
            name="native_language",
        ),
        migrations.RemoveField(
            model_name="signup",
            name="notifications",
        ),
        migrations.RemoveField(
            model_name="signup",
            name="phone_number",
        ),
        migrations.RemoveField(
            model_name="signup",
            name="responsible_for_group",
        ),
        migrations.RemoveField(
            model_name="signup",
            name="service_language",
        ),
    ]
