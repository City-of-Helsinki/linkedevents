---

version: 2.1

orbs:
  jira: circleci/jira@1.1.2
  jq: circleci/jq@2.0.0
  slack: circleci/slack@3.4.2

aliases:
  # Remember to update the site_packages_path if you update the python version
  # lxml doesn't yet have a Python 3.8 wheel package so use Python 3.7 instead
  - &python_image_version 3.7.6
  # The tilde (home path) has been removed since it doesn't work in docker commands in bin/test_ci.sh
  - &site_packages_path .local/lib/python3.7/site-packages

  - &builder_image_version ba51862a560186ed40bc3d4c425e8132a7e5c0b3

  - &workspace_root ~/repo

  - &voltti_global_context
    context: org-global

  - &ci_espooevents_ssh_key_fingerprint 51:cc:59:96:f7:aa:1f:12:86:dc:0f:ba:a7:0c:12:db

  - &repo_cache_key v1-repo-{{ .Branch }}-{{ .Revision }}

  - &deps_cache_key "
    v1-python-deps-\
    {{ checksum \".circleci/config.yml\" }}-\
    {{ checksum \"requirements-dev.in\" }}-\
    {{ checksum \"requirements-dev.txt\" }}-\
    {{ checksum \"requirements.in\" }}-\
    {{ checksum \"requirements.txt\" }}"

  - &jq_cache_key "
    v1-jq-\
    {{ checksum \".circleci/config.yml\" }}"

executors:
  python:
    parameters:
      python_image_version:
        type: string
        default: *python_image_version
    docker:
      - image: circleci/python:<< parameters.python_image_version >>
    working_directory: *workspace_root

  builder:
    parameters:
      builder_image_version:
        type: string
        default: *builder_image_version
    docker:
      - image: 307238562370.dkr.ecr.eu-west-1.amazonaws.com/voltti/builder-aws:<< parameters.builder_image_version >>
    working_directory: *workspace_root

commands:
  attach_root_workspace:
    steps:
      - attach_workspace:
          at: *workspace_root
  deploy_ecs:
    description: "Deploy to AWS ECS"
    parameters:
      ecs_module_directory:
        type: string
        default: espooevents-infra/terraform/espooevents-ecs
      ecs_module_name:
        description: The Terraform ECS module name that should be deployed
        type: string
        default: espooevents_service
      service_name:
        type: string
        default: espooevents-service
      target_env:
        type: string
    steps:
      - add_ssh_keys:
          fingerprints:
            - *ci_espooevents_ssh_key_fingerprint
      - run:
          name: Clone the infra repository
          command: |
            git clone git@github.com:espoon-voltti/espooevents-infra.git
            cd << parameters.ecs_module_directory >>
      - run:
          name: Get the currently deployed version
          command: |
            . replace-credentials

            cd << parameters.ecs_module_directory >>
            terraform init
            terraform workspace select << parameters.target_env >>
            OLD_VERSION=$(terraform output << parameters.service_name >>_version)
            echo "Current version: $OLD_VERSION"
            echo "export OLD_VERSION=$OLD_VERSION" >> $BASH_ENV
      - run:
          name: Deploy to << parameters.target_env >>
          command: |
            . replace-credentials

            cd << parameters.ecs_module_directory >>
            terraform init
            terraform workspace select << parameters.target_env >>
            terraform apply \
              -input=false \
              -auto-approve \
              -lock-timeout=300s \
              -var << parameters.service_name >>_version="${CIRCLE_SHA1}" \
              -target=module.<< parameters.ecs_module_name >>
      # TODO add check to builder-aws Docker image
      - run:
          name: Check if the new deployment becomes stable
          # We need to increase the timeout limit since the services-stable command will run for 10 minutes without any
          # output if the service is unstable
          # TODO we could use a custom polling mechanism similar to services-stable with a shorter timeout
          no_output_timeout: 15m
          command: |
            # Disable exit on error since aws services-stable exits with 255 if the service is unstable and that would
            # fail the step prematurely
            set +e
            . replace-credentials

            aws ecs \
              wait services-stable \
              --region eu-west-1 \
              --profile voltti-<< parameters.target_env >> \
              --cluster voltti-ecs-cluster-<< parameters.target_env >> \
              --services << parameters.service_name >>
            IS_STABLE=$?
            echo "IS_STABLE value: $IS_STABLE"
            echo "export IS_STABLE=$IS_STABLE" >> $BASH_ENV
            if [[ "$IS_STABLE" -eq 0 ]]; then
              echo "The service has been successfully deployed to AWS ECS"
              exit 0
            else
              echo "The deployment to AWS ECS failed!"
              exit 1
            fi
      # TODO add revert to builder-aws Docker image
      - run:
          name: Revert to previously deployed version if new deployment fails
          when: on_fail
          command: |
            if [[ -z "$OLD_VERSION" || -z "$IS_STABLE" ]]; then
              echo "Required environment variables aren't set"
              exit 1
            fi

            . replace-credentials

            cd << parameters.ecs_module_directory >>
            terraform init
            terraform workspace select << parameters.target_env >>
            terraform apply \
              -input=false \
              -auto-approve \
              -lock-timeout=300s \
              -var << parameters.service_name >>_version="$OLD_VERSION" \
              -target=module.<< parameters.ecs_module_name >>
  build_and_push_docker_image:
    parameters:
      base_image_version:
        type: string
      docker_image_name:
        type: string
      docker_image_target:
        type: string
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker login to ECR
          command: ecr-login
      - run:
          name: Build docker image
          command: |
            docker build \
              -f Dockerfile.dist \
              -t << parameters.docker_image_name >> \
              --target << parameters.docker_image_target >> \
              --build-arg build=$CIRCLE_BUILD_NUM \
              --build-arg commit=$CIRCLE_SHA1 \
              --build-arg BASE_IMAGE_VERSION=<< parameters.base_image_version >> \
              .
      - run:
          name: Tag and push dist docker image
          command: ecr-push "<< parameters.docker_image_name >>"
  notify_jira:
    steps:
      - restore_jq_cache
      - jira/notify
  # Must be the last step in a job
  notify_slack:
    description: "Notify via Slack"
    steps:
      - slack/status:
          fail_only: true
          only_for_branches: master
  restore_deps_cache:
    steps:
      - restore_cache:
          keys:
            - *deps_cache_key
  restore_jq_cache:
    steps:
      - restore_cache:
          keys:
            - *jq_cache_key
      - run: echo 'export PATH=~/bin:$PATH' >> $BASH_ENV
  restore_repo_cache:
    steps:
      - restore_cache:
          keys:
            - *repo_cache_key

jobs:
  checkout_code:
    executor: python
    steps:
      - restore_repo_cache
      - checkout
      - save_cache:
          key: *repo_cache_key
          paths:
            - .
      - notify_jira
      - notify_slack

  install_deps:
    parameters:
      site_packages_path:
        type: string
        default: *site_packages_path
    executor: python
    steps:
      - restore_repo_cache
      - restore_deps_cache
      - run:
          name: Install dependencies
          command: |
            pip install --user pip-tools
            pip-sync --user requirements-dev.txt requirements.txt
      - save_cache:
          key: *deps_cache_key
          paths:
            - ~/.local/bin
            - ~/<< parameters.site_packages_path >>
      # Install and cache jq so that it doesn't need to be installed again in every job that uses jira/notify.
      # Otherwise, we will hit jq's rate limits and the job will fail.
      - restore_jq_cache
      - run: mkdir -p ~/bin
      - jq/install:
          install-dir: ~/bin
      - save_cache:
          key: *jq_cache_key
          paths:
            - ~/bin/jq
      - jira/notify
      - notify_slack

  lint:
    executor: python
    steps:
      - restore_repo_cache
      - restore_deps_cache
      - run: flake8 .
      - notify_jira
      - notify_slack

  test:
    executor: builder
    environment:
      PYTHON_IMAGE_VERSION: *python_image_version
      SITE_PACKAGES_PATH: *site_packages_path
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: linkedevents
      DB_MIGRATION_USER: linkedevents_migration
      DB_MIGRATION_PASSWORD: secret
      DB_APP_USER: linkedevents_application
      DB_APP_PASSWORD: secret
    steps:
      - restore_repo_cache
      - restore_deps_cache
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Docker login to ECR
          command: ecr-login
      - run:
          name: Run test script
          command: ./bin/test_ci.sh
      - notify_jira
      - notify_slack

  build:
    executor: python
    steps:
      - restore_repo_cache
      - restore_deps_cache
      - run:
          name: Install dependencies required for running the management commands
          command: |
            sudo apt-get update
            sudo apt-get install -y --no-install-recommends --no-install-suggests \
              gdal-bin
      # This could also be done inside a container built from Dockerfile.dist (see, e.g., Makefile for more details)
      - run:
          name: Override the default Linked Events templates with city specific templates
          command: python manage.py install_templates helevents
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - ./templates
      - notify_jira
      - notify_slack

  dockerize:
    parameters:
      docker_image_name:
        type: string
      docker_image_target:
        type: string
      python_base_image_version:
        type: string
        default: *python_image_version
    executor: builder
    steps:
      - attach_root_workspace
      - restore_repo_cache
      - build_and_push_docker_image:
          # Python image version
          base_image_version: << parameters.python_base_image_version >>-slim
          docker_image_name: << parameters.docker_image_name >>
          docker_image_target: << parameters.docker_image_target >>
      - notify_jira
      - notify_slack

  deploy:
    parameters:
      target_env:
        type: enum
        enum: ["dev", "test", "staging", "prod"]
      jira_env_type:
        type: enum
        enum: ["development", "testing", "staging", "production"]
    executor: builder
    steps:
      - deploy_ecs:
          target_env: << parameters.target_env >>
      - restore_jq_cache
      - jira/notify:
          environment_type: << parameters.jira_env_type >>
          job_type: deployment
      - notify_slack

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - checkout_code
      - install_deps:
          requires:
            - checkout_code
      - lint:
          requires:
            - install_deps
      - test:
          <<: *voltti_global_context
          requires:
            - install_deps
      - build:
          requires:
            - lint
            - test
      - dockerize:
          <<: *voltti_global_context
          name: dockerize_dist
          docker_image_name: espooevents/service
          docker_image_target: dist
          requires:
            - build
      - dockerize:
          <<: *voltti_global_context
          name: dockerize_importer
          docker_image_name: espooevents/service-importer
          docker_image_target: admin
          requires:
            - build

      # Deploy to dev
      - deploy:
          <<: *voltti_global_context
          name: deploy_dev
          target_env: dev
          jira_env_type: development
          requires:
            - dockerize_dist
          filters:
            branches:
              only: master

      # Deploy to test
      - deploy:
          <<: *voltti_global_context
          name: deploy_test
          target_env: test
          jira_env_type: testing
          requires:
            - dockerize_dist
          filters:
            branches:
              only: master

      # Deploy to staging
      - approve_staging_deploy:
          type: approval
          requires:
            - deploy_test
          filters:
            branches:
              only: master
      - deploy:
          <<: *voltti_global_context
          name: deploy_staging
          target_env: staging
          jira_env_type: staging
          requires:
            - approve_staging_deploy
          filters:
            branches:
              only: master

      # Deploy to prod
      - approve_prod_deploy:
          type: approval
          requires:
            - deploy_staging
          filters:
            branches:
              only: master
      - deploy:
          <<: *voltti_global_context
          name: deploy_prod
          target_env: prod
          jira_env_type: production
          requires:
            - approve_prod_deploy
          filters:
            branches:
              only: master
