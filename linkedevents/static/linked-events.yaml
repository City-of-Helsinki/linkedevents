openapi: 3.0.3
info:
  title: Linked Events information API
  version: v1
  description: |-
    Linked Events provides categorized data on events and places using JSON-LD format.

    Events can be searched by date and location. Location can be exact address or larger area such as neighbourhood or borough.

    JSON-LD format is streamlined using include mechanism. API users can request that certain fields are included directly into the result, instead of being hyperlinks to objects.

    Several fields are multilingual. These are implemented as object with each language variant as property. In this specification each multilingual field has (fi,sv,en) property triplet as example.
paths:
  /data_source/:
    get:
      operationId: data_source_list
      description: The returned list describes data sources. Only admin users are
        allowed to use this endpoint.
      summary: Return a list of data sources
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 100 is the maximum value
          for page_size.
        schema:
          type: integer
      tags:
      - data_source
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDataSourceList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedDataSourceList'
          description: ''
  /data_source/{id}/:
    get:
      operationId: data_source_retrieve
      description: Can be used to retrieve a single data source. Only admin users
        are allowed to use this endpoint.
      summary: Return information for a single data source
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this data source.
        required: true
      tags:
      - data_source
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSource'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/DataSource'
          description: ''
  /event/:
    get:
      operationId: event_list
      description: "<h2 id=\"filtering-retrieved-events\">Filtering retrieved events</h2>\n\
        <p>Query parameters can be used to filter the retrieved events by the following\
        \ criteria.</p>\n\n<h3 id=\"local-ongoing\">Ongoing local events</h3>\n<p>Use\
        \ to quickly access local (municipality level) events that are upcoming or\
        \ have not ended yet. Combines the search on a number of description, name,\
        \ and keyword fields. Locality is defined onthe basis of MUNIGEO_MUNI value,\
        \ which is set in the settings file. In the Helsinki case all the events would\
        \ be retrieved that happen within Helsinki. Comes in two flavors: AND and\
        \ OR.\nUse <code>local_ongoing_AND=lapset,musiikki</code> to search for the\
        \ events with both search terms in the description fields and <code>local_ongoing_OR</code>\
        \ to search for the events with atleast one term mentioned. In case you need\
        \ to realize a more complicated logic and search for a combination of search\
        \ terms as in <code>(singing OR vocal) AND (workshop OR training)</code> use\
        \ <code>local_ongoing_OR_setX</code> parameter, where <code>X</code> is a\
        \ number.</p>\n<p>Examples:</p>\n<pre><code>event/?local_ongoing_OR=lapsi,musiikki</code></pre>\n\
        <pre><code>event/?local_ongoing_OR_set1=lapsi,musiikki&local_ongoing_OR_set2=leiri,kurssi</code></pre>\n\
        \n<h3 id=\"internet-ongoing\">Ongoing internet events</h3>\n<p>Use to quickly\
        \ access internet-based events that are upcoming or have not ended yet. Usage\
        \ is thesame as for local ongoing events, three variations: <code>internet_ongoing_AND</code>,\
        \ <code>internet_ongoing_OR</code>, and <code>internet_ongoing_OR_setX</code>,\
        \ Note, that <code>local_ongoing</code> and <code>internet_ongoing</code>\
        \ are mutually exclusive.</p>\n<p>Example:</p>\n<pre><code>event/?internet_ongoing_AND=lapsi,musiikki</code></pre>\n\
        \n<h3 id=\"all-ongoing\">All ongoing events</h3>\n<p>All ongoing events, both\
        \ internet and local combined. Usage is the same as for local ongoing events:\
        \ <code>all_ongoing_AND</code>, <code>all_ongoing_OR</code> and <code>all_ongoing_OR_setX</code></p>\n\
        <p>Example:</p>\n<pre><code>event/?all_ongoing_AND=lapsi,musiikki</code></pre>\n\
        \n<h3 id=\"internet-based\">Internet based</h3>\n<p>Filter for all the events\
        \ that happen in the internet, both past and upcoming.</p>\n<p>Example:</p>\n\
        <pre><code>event/?internet_based=true</code></pre>\n\n<h3 id=\"event-time\"\
        >Event time</h3>\n<p>Use <code>start</code> and <code>end</code> to restrict\
        \ the date range of returned events. Any events that intersect with the given\
        \ date range will be returned.</p>\n<p>The parameters <code>start</code> and\
        \ <code>end</code> can be given in the following formats:</p>\n<ul>\n    <li>ISO\
        \ 8601 (including the time of day), i.e. YYYY-MM-DDTHH:MM:SSZ</li>\n    <li>yyyy-mm-dd</li>\n\
        </ul>\n<p>In addition, <code>today</code> (for start or end of today) and\
        \ <code>now</code> (for the exact current timestamp) can be used in either\
        \ parameter to get current events.</p>\n<p>Example:</p>\n<pre><code>event/?start=today&amp;end=2020-12-31</code></pre>\n\
        <pre><code>event/?start=now&amp;end=today</code></pre>\n\n<p>You can also\
        \ use <code>days</code> filter to restrict the date range of returned events.\
        \ Any events that intersect with the current time and amount of days from\
        \ current time will be returned.</p>\n<p>The parameters <code>start</code>\
        \ and <code>end</code> cannot be used together with the <code>days</code>\
        \ parameter.</p>\n<p>Example:</p>\n<pre><code>event/?days=7</code></pre>\n\
        \n<h3 id=\"event-hours\">Event start/end time</h3>\n<p>Use <code>starts_after</code>,\
        \ <code>starts_before</code>, <code>ends_after</code>, and<code>ends_before</code>\
        \ to filter for the events that start and end within certain hours, for example\
        \ for the ones that start after 17:00 and end before 21:00.</p>\n<p>The parameters\
        \ can be given as:</p>\n<ul>\n    <li>Hours only</li>\n    <li>Hours and minutes\
        \ separated by a colon</li>\n</ul>\n<p>Example:</p>\n<pre><code>event/?starts_after=16:30&amp;ends_before=21</code></pre>\n\
        \n<h3 id=\"event-duration\">Event duration</h3>\n<p>Use <code>max_duration</code>\
        \ to filter for the events that last up to a specified time, or <code>min_duration</code>\
        \ to filter for the events that last at least a specified amount of time.</p>\n\
        <p>The parameters are expressed in format:</p>\n<ul>\n    <li>86400 or 86400s\
        \ (24 hours)</li>\n    <li>180m or 3h (3 hours)</li>\n    <li>3d (3 days)</li>\n\
        </ul>\n<p>Example:</p>\n<pre><code>event/?max_duration=3d</code></pre>\n\n\
        <h3 id=\"event-location\">Event location</h3>\n<h4 id=\"bounding-box\">Bounding\
        \ box</h4>\n<p>To restrict the retrieved events to a geographical region,\
        \ use the query parameter <code>bbox</code> in the format</p>\n<pre><code>bbox=west,south,east,north</code></pre>\n\
        <p>Where <code>west</code> is the longitude of the rectangle's western boundary,\
        \ <code>south</code> is the latitude of the rectangle's southern boundary,\
        \ and so on. The default coordinate systemis the trusty old EPSG:4326 known\
        \ from all online maps, and can be overridden with <code>srid</code> parameter.</p>\n\
        <p>Example:</p>\n<pre><code>event/?bbox=24.9348,60.1762,24.9681,60.1889</code></pre>\n\
        \n<h4 id=\"specific-location\">Specific location</h4>\n<p>To restrict the\
        \ retrieved events to a known location(s), use the query parameter <code>location</code>,\
        \ separating values by commas if you wish to query for several locations.</p>\n\
        <p>Location ids are found at the <code>place</code> endpoint, which lists\
        \ the locations in decreasing number of events found. Most locations originate\
        \ from the Helsinki service point registry (tprek), hence the format <code>tprek:28473</code>.\
        \ An easy way to locate service points is to browse <code>servicemap.hel.fi</code>,\
        \ which uses the same location ids, e.g. <code>servicemap.hel.fi/unit/28473</code>.</p>\n\
        <p>Example:</p>\n<pre><code>event/?location=tprek:28473</code></pre>\n\n<h4\
        \ id=\"district\">District</h4>\n<p>To restrict the retrieved events to city\
        \ district(s), use the query parameter <code>division</code>, separating values\
        \ by commas if you wish to query for several divisions.</p>\n<p>City of Helsinki\
        \ neighborhoods (kaupunginosa), districts (peruspiiri) and subdistricts (osa-alue)\
        \ are supported. <a href=\"https://kartta.hel.fi/link/8BqeiY\">Check the divisions\
        \ on the Helsinki map service.</a></p>\n<p> You may query either by specific\
        \ OCD division type <code>peruspiiri:malmi</code>, or by division name <code>malmi</code>.\
        \ The latter query checks all divisions with the name, regardless of division\
        \ type.</p>\n<p>Example:</p>\n<pre><code>event/?division=malmi</code></pre>\n\
        \n<h4 id=\"distance-filter\">Within a distance (or \"circle filter\")</h4>\n\
        <p>To restrict the retrieved events to a certain distance from a point, use\
        \ the query parameters <code>dwithin_origin</code> and <code>dwithin_metres</code>\
        \ in the format</p>\n<pre><code>dwithin_origin=lon,lat&dwithin_metres=distance</code></pre>\n\
        <p>Where <code>lon</code> is the longitude of the origin point, <code>lat</code>\
        \ is the latitude of the origin point, and <code>distance</code> is the radius\
        \ in metres. Both parameters are required. The default coordinate system is\
        \ EPSG:4326 and can be overridden with the <code>srid</code> parameter.</p>\n\
        <p>Example:</p>\n<pre><code>event/?dwithin_origin=24.9348,60.1762&dwithin_metres=1000</code></pre>\n\
        \n\n<h3 id=\"event-category\">Event category</h3>\n<p>To restrict the retrieved\
        \ events by category, use the query parameter <code>keyword</code>, separating\
        \ values by commas if you wish to query for any of several keywords, or the\
        \ parameter <code>keyword_AND</code>, if you require all provided values (separated\
        \ by commas) to be present. Use parameter <code>keyword!</code> if you require\
        \ all provided values (separated by commas)<strong>not</strong> to be present.</p>\n\
        <p>In case you need to realize a more complicated logic and search for a \
        \ combination of keywords as in <code>(yso:p1235 OR yso:p1947) AND (yso:p14004\
        \ OR yso:p11185)</code> use <code>keyword_OR_setX</code> parameter, where\
        \ <code>X</code> is a number.</p>\n<p>Keyword ids are found at the <code>keyword</code>\
        \ endpoint, which lists the keywords in decreasing number of events found.\
        \ The common keywords used in all events originate from the general Finnish\
        \ ontology (YSO), hence the format <code>yso:p4354</code>.</p>\n<p>The most\
        \ common event categories are listed in the two keyword sets <a href=\"https://api.hel.fi/linkedevents/v1/keyword_set/helsinki:topics/\"\
        >helsinki:topics</a> and <a href=\"https://api.hel.fi/linkedevents/v1/keyword_set/helsinki:audiences/\"\
        >helsinki:audiences</a>, which list the YSO keywords that are present in most\
        \ events to specify event main topic and audience.</p>\n<p>Example:</p>\n\
        <pre><code>event/?keyword=yso:p4354</code></pre>\n<pre><code>event/?keyword_OR_set1=yso:p1235,yso:p1947&keyword_OR_set2=yso:p14004,yso:p11185</code></pre>\n\
        \n<h3 id=\"event-keywordset-search\">Keyword set search</h3>\n<p>Some services\
        \ maintain curated keyword sets, which can also be used in search with query\
        \ parameters <code>keyword_set_AND</code> and <code>keyword_set_OR</code>.\
        \ As names of the keyword sets can repeat between the services, ids should\
        \ be supplied. Say, we have one keyword set <b>Music</b> with id \"myservice:1\"\
        \ that contains keywords rock and jazz, and another keyword set<b>Workshops</b>\
        \ with keywords \"workshop\" and \"seminar\" and id \"myservice:2\". Then\
        \ a request <code>/event/?keyword_set_AND=myservice:1,myservice:2</code> would\
        \ return the events matching the following expression: (rock OR jazz) AND\
        \ (workshop OR seminar).</p>\n\n<h3 id=\"event-last-modified\">Event last\
        \ modification time</h3>\n<p>To find events that have changed since you last\
        \ polled Linkedevents API (to e.g. update your event cache), it is best to\
        \ use the query parameter <code>last_modified_since</code>. This allows you\
        \ to only return data that has changed after your last update. You may also\
        \ include events that have been deleted in the API in the results by using\
        \ the <code>show_deleted</code> filter. This allows you to update your cache\
        \ with all added, modified and deleted events without having to fetch *all*\
        \ future events every time.</p>\n<p>Example:</p>\n<pre><code>event/?last_modified_since=2020-04-07&show_deleted=true</code></pre>\n\
        \n<h3 id=\"event-ids\">Specific ids</h3>\n<p>To find events that have specific\
        \ id use parameter <code>ids</code>, separating values by commas if you wish\
        \ to query for several event ids.</p>\n<p>Example:</p>\n<pre><code>event/?ids=helsinki:1</code></pre>\n\
        \n<h3 id=\"event-status\">Event status</h3>\n<p>Events in Linkedevents (indicated\
        \ by the <code>event_status</code> field) may be either scheduled as planned\
        \ (<code>EventScheduled</code>), rescheduled if their start time has changed\
        \ after they were first published (<code>EventRescheduled</code>), cancelled\
        \ if they were cancelled altogether after publication (<code>EventCancelled</code>),\
        \ or postponed to the indefinite future if they could not be organized at\
        \ the original time (<code>EventPostponed</code>). These statuses stem from\
        \ <a href='https://schema.org/eventStatus'>schema.org</a>.</p>\n<p>You may\
        \ filter events with only the desired status with the <code>event_status</code>\
        \ filter.</p>\n<p>Example:</p>\n<pre><code>event/?event_status=EventCancelled</code></pre>\n\
        \n<p>It is also possible to use multiple <code>event_status</code> parameters\
        \ in a single query.\n    Statuses must be separated by a comma.</p>\n<p>Example:</p>\n\
        <pre><code>event/?event_status=EventCancelled,EventPostponed</code></pre>\n\
        \n<h3 id=\"event-type\">Event type</h3>\n<p>Events in Linkedevents (indicated\
        \ by the <code>type_id</code> field) may be event (<code>General</code>),\
        \ course (<code>Course</code>) or volunteering (<code>Volunteering</code>).\
        \ By default, only events with General type_id are returned.</p>\n<p>You may\
        \ filter events with only the desired type with the <code>event_type</code>\
        \ filter, separating values by commas if you wish to query for several types.</p>\n\
        <p>Example:</p>\n<pre><code>event/?event_type=General,Course</code></pre>\n\
        \n<h3 id=\"event-text\">Event text</h3>\n<p>To find out events that contain\
        \ a specific string in any of the text fields, use the query parameter <code>text</code>.</p>\n\
        <p>Example:</p>\n<pre><code>event/?text=shostakovich</code></pre>\n\n<h3 id=\"\
        event-combined_text\">Combined text</h3>\n<p>While the <code>text</code> search\
        \ is looking for the events containg exact matches of the search string, <code>combined_text</code>\
        \ filtering finds events with exact text match for event text fields but retrieves\
        \ expected keywords on the basis of similarity.</p>\n<p>Example:</p>\n<pre><code>event/?combined_text=lapppset</code></pre>\n\
        \n<h3 id=\"event-price\">Event price</h3>\n<p>Events may or may not contain\
        \ the <code>offers</code> field that lists event pricing. To return only free\
        \ or non-free events, use the query parameter<code>is_free</code>. However,\
        \ note that from some data sources, no event pricing info is available, so\
        \ this filter will only return those events which have pricing data available.</p>\n\
        <p>Example:</p>\n<pre><code>event/?is_free=true</code></pre>\n\n<h3 id=\"\
        event-language\">Event language</h3>\n<p>To find events that have a set language\
        \ or event data translated into that language, use the query parameter <code>language</code>.\
        \ If you only wish to see events that have a set language, use the <code>in_language</code>\
        \ parameter, and if you only want event data translated to a set language,\
        \ use the <code>translation</code> parameter.</p>\n<p>Supported languages\
        \ are found at the <code>language</code> endpoint, which also lists which\
        \ languages have translations available. Currently, translations are supported\
        \ in <code>fi</code>, <code>sv</code>, <code>en</code>, <code>ru</code>, <code>zh_hans</code>,\
        \ and <code>ar</code>.</p>\n<p>Example:</p>\n<pre><code>event/?language=ru</code></pre>\n\
        \n<h3 id=\"audience-age\">Event audience age boundaries.</h3>\n<p>To find\
        \ events that are designed for specific age audiences use the query paramteres\
        \ <code>audience_min_age_lt</code>, <code>audience_min_age_gt</code>, <code>audience_max_age_lt</code>,\
        \ <code>audience_max_age_gt</code>.</p>\n<p> <code>audience_min_age_lt</code>\
        \ returns the events whose minimal age is lower than or equals the specified\
        \ value, <code>audience_min_age_gt</code> returns the events whose minimal\
        \ age is greater than or equals the specified value. <code>max_age</code>\
        \ parameteres, naturally, work the same way only for the maximum age of the\
        \ event audience. Note, that the events that are not designed for\n    the\
        \ specific audiences will be omitted.</p>\n<p><code>audience_max_age</code>\
        \ and <code>audience_min_age</code> parameters without <code>lt</code> and\
        \ <code>gt</code> modifiers are left for backward compatibility only and should\
        \ not be employed.</p>\n<p>Example:</p>\n<pre><code>event/?audience_min_age_gt=10</code></pre>\n\
        \n<h3 id=\"suitable_for\">Select events suitable for certain age.</h3>\n<p>To\
        \ find events that are suitable for certain age  use the query paramter <code>suitable_for</code>\
        \ that returns all the events that are suitable for the age or age range specified.\
        \ Under the hood it excludes all the events that have max age limit below\
        \ or min age limit above the age specified. Suitable events with just one\
        \ age boundary specified are returned, events with no age limits specified\
        \ are excluded. Query parameter can take either one or two arguments, the\
        \ order of parameters when specifying the age range is not important.</p>\n\
        <p>Examples:</p>\n<pre><code>event/?suitable_for=12</code></pre>\n<pre><code>event/?suitable_for=12,14</code></pre>\n\
        \n<h3 id=\"event-publisher\">Event publisher</h3>\n<p>To find out events that\
        \ are published by a specific organization, use the query parameter <code>publisher</code>,\
        \ separating values by commas if you wish to query for several publishers.</p>\n\
        <p>Existing publisher organizations are found at the <code>organization</code>\
        \ endpoint. City of Helsinki internal publishers have ids of the form <code>ahjo:origin_id</code>\
        \ as they originate from the Helsinki Ahjo decisionmaking system, and have\
        \ a rather complex hierarchy. External publishers may have their own namespaces,\
        \ ids and hierarchies.</p>\n<p>Also, it is possible to fetch events under\
        \ a specific publisher organization hierarchy (say <a href='https://api.hel.fi/linkedevents/v1/organization/ahjo:00001/'>City\
        \ of Helsinki</a>) by using the parameter <code>publisher_ancestor</code>,\
        \ which returns all events published by any suborganizations (at any level)\
        \ of the given organization.</p>\n<p>Example:</p>\n<pre><code>event/?publisher=ytj:0586977-6</code></pre>\n\
        <pre><code>event/?publisher_ancestor=ahjo:00001</code></pre>\n\n<h3 id=\"\
        event-data-source\">Event data source</h3>\n<p>To find out events that originate\
        \ from a specific source system, use the query parameter <code>data_source</code>.\
        \ All event ids are of the form <code>data_source:origin_id</code>, so this\
        \ allows you to return only events coming to Linkedevents from a specific\
        \ data system. <code>helsinki</code> is the name of our own data source, i.e.\
        \ events where Linkedevents API  itself is the master data.</p>\n<p>Example:</p>\n\
        <pre><code>event/?data_source=helmet</code></pre>\n\n<h3 id=\"event-hierarchy\"\
        >Event hierarchy</h3>\n<p>Events in linkedevents may be either standalone\
        \ events, or they may have super or sub events. There are two types of super\
        \ events, indicated in the field <code>super_event_type</code> by <code>recurring</code>\
        \ (repeating events, event series) and <code>umbrella</code> (festivals etc.).</p>\n\
        <p><code>recurring</code> events last for a period and have <code>sub_events</code>\
        \ that all have similar data, but different dates.</p>\n<p><code>umbrella</code>\
        \ events last for a period and may have different <code>sub_events</code>,\
        \ including <code>recurring</code> events (i.e. an <code>umbrella</code> festival\
        \ may have a <code>recurring</code> theater play <code>sub_event</code>, which\
        \ may have several nights as <code>sub_events</code>.)</p>\n\n<h4 id=\"super-event\"\
        >Super event type</h4>\n<p>You may use the query parameter <code>super_event_type</code>,\
        \ comma separated, to get only super events of specific types. You may use\
        \ <code>none</code> if you want non-super events included.</p>\n<p>Example:</p>\n\
        <pre><code>event/?super_event_type=umbrella,none</code></pre>\n\n<h4 id=\"\
        super-event-type\">Super event</h4>\n<p>You may use the query parameter <code>super_event</code>,\
        \ comma separated, to get all subevents for specific superevents. You may\
        \ use <code>none</code> if you want all events which have no superevent included.</p>\n\
        <p>Example:</p>\n<pre><code>event/?super_event=linkedevents:agg-103</code></pre>\n\
        \n<h4 id=\"hide-recurring-children\">Hide recurring children</h4>\n<p>You\
        \ may use the query parameter <code>hide_recurring_children</code> to hide\
        \ all child events for super events which are of type <code>recurring</code>.</p>\n\
        <p>Example:</p>\n<pre><code>event/?hide_recurring_children=true</code></pre>\n\
        \n<h3 id=\"event-registration\">Event with registration</h3>\n<p>To find out\
        \ events with or without a registration, use the query parameter<code>registration</code>.</p>\n\
        <p>Example:</p>\n<pre><code>event/?registration=true</code></pre>\n\n<h3 id=\"\
        enrolment\">Open enrolment</h3>\n<p>Two endpoints show the events that have\
        \ connected registrations and have places either at the event itself <code>enrolment_open</code>\
        \ or in the waiting lists <code>enrolment_open_waitlist</code>. Note that\
        \ the latter query parameter when set to <code>true</code> returns also the\
        \ events that have open spots at the event itself. Null values are regarded\
        \ as unlimited number of spots at the event or in the waiting list.</p>\n\
        <p>For example:</p>\n<pre><code>event/?enrolment_open_waitilist=true</code></pre>\n\
        \n<h3 id=\"enrolment-open-on\">Enrolment open on a given date</h3>\n<p>It\
        \ is possible to check if a given datetime is within events' enrolment start\
        \ and end times. In other words,\n    if any events are open on a given date\
        \ and time. The given datetime is expected to be in the events' timezone.</p>\n\
        <p><code>enrolment_open_on</code> parameter displays events where the given\
        \ datetime is within the\n    <code>enrolment_start_time</code> and <code>enrolment_end_time</code>\
        \ of the events. If an event\n    has a registration, the registration's enrolment\
        \ start and end times will be preferred over the event's times.</p>\n<p>For\
        \ example:</p>\n<pre><code>event/?enrolment_open_on=2024-02-19T12:00:00</code></pre>\n\
        \n<h3 id=\"attendee-capacity\">Attendee capacity</h3>\n<p>Filters for filtering\
        \ by event maximum_attendee_capacity and minimum_attendee_capacity:</p>\n\n\
        <h4>Filtering for maximum_attendee_capacity</h4>\n<p>It is possible to filter\
        \ by maximum_attendee_capacity using gte (>) or lte (<) filters.</p>\n\n<p><code>maximum_attendee_capacity_gte</code>\
        \ parameter displays events with maximum attendee capacity greater than\n\
        \    or equal the applied parameter (integer value)</p>\n<p>Example:</p>\n\
        <pre><code>event/?maximum_attendee_capacity_gte=10</code></pre>\n\n<p><code>maximum_attendee_capacity_lte</code>\
        \ parameter displays events with maximum attendee capacity less than\n   \
        \ or equal the applied parameter (integer value)</p>\n<p>Example:</p>\n<pre><code>event/?maximum_attendee_capacity_lte=10</code></pre>\n\
        \n<h4 id=\"\">Filtering for minimum_attendee_capacity</h4>\n<p>It is possible\
        \ to filter by minimum_attendee_capacity using gte (>) or lte (<) filters.</p>\n\
        \n<p><code>minimum_attendee_capacity_gte</code> parameter displays events\
        \ with minimum attendee capacity greater than\n    or equal the applied parameter\
        \ (integer value)</p>\n<p>Example:</p>\n<pre><code>event/?minimum_attendee_capacity_gte=10</code></pre>\n\
        \n<p><code>minimum_attendee_capacity_lte</code> parameter displays events\
        \ with minimum attendee capacity less than\n    or equal the applied parameter\
        \ (integer value)</p>\n<p>Example:</p>\n<pre><code>event/?minimum_attendee_capacity_lte=10</code></pre>\n\
        \n<h3 id=\"remaining-attendee-capacity\">Remaining registration attendee or\
        \ waiting list capacity</h3>\n<p>Filters for filtering by registration remaining_attendee_capacity\
        \ and remaining_waiting_list_capacity:</p>\n\n<h4>Filtering for registration\
        \ remaining_attendee_capacity</h4>\n<p>It is possible to filter by registration\
        \ remaining_attendee_capacity using gte (>=) or isnull filters.</p>\n\n<p><code>registration__remaining_attendee_capacity__gte</code>\
        \ parameter displays events where registration's\n    remaining attendee capacity\
        \ is greater than or equal the applied parameter (integer value)</p>\n<p>Example:</p>\n\
        <pre><code>event/?registration__remaining_attendee_capacity__gte=10</code></pre>\n\
        \n<p><code>registration__remaining_attendee_capacity__isnull</code> parameter\
        \ displays events where registration's\n    remaining attendee capacity is\
        \ or is not NULL</p>\n<p>The values <code>True</code>, <code>true</code> and\
        \ <code>1</code> are all considered to be \"true\".</p>\n<p>The values <code>False</code>,\
        \ <code>false</code> and <code>0</code> are all considered to be \"false\"\
        .</p>\n<p>Example:</p>\n<pre><code>event/?registration__remaining_attendee_capacity__isnull=true</code></pre>\n\
        \n<h4>Filtering for registration remaining_waiting_list_capacity</h4>\n<p>It\
        \ is possible to filter by registration remaining_waiting_list_capacity using\
        \ gte (>=) or isnull filters.</p>\n\n<p><code>registration__remaining_waiting_list_capacity__gte</code>\
        \ parameter displays events where registration's\n    remaining waiting list\
        \ capacity is greater than or equal the applied parameter (integer value)</p>\n\
        <p>Example:</p>\n<pre><code>event/?registration__remaining_waiting_list_capacity__gte=10</code></pre>\n\
        \n<p><code>registration__remaining_waiting_list_capacity__isnull</code> parameter\
        \ displays events where registration's\n    remaining waiting list capacity\
        \ is or is not NULL</p>\n<p>The values <code>True</code>, <code>true</code>\
        \ and <code>1</code> are all considered to be \"true\".</p>\n<p>The values\
        \ <code>False</code>, <code>false</code> and <code>0</code> are all considered\
        \ to be \"false\".</p>\n<p>Example:</p>\n<pre><code>event/?registration__remaining_waiting_list_capacity__isnull=true</code></pre>\n\
        \n<h3 id=\"event-for-authenticated-users\">Filtering for authenticated users</h3>\n\
        <p>By default, only public events are shown in the event list. However, certain\
        \ query parameters allow customizing the listing for authenticated users</p>\n\
        \n<h4 id=\"event-show-all\">Show all events</h4>\n<p><code>show_all</code>\
        \ parameter displays all events authenticated user can edit, including drafts,\
        \ and public non-editable events</p>\n<p>Example:</p>\n<pre><code>event/?show_all=true</code></pre>\n\
        \n<h4 id=\"event-publication-status\">Publication status</h4>\n<p>Events in\
        \ Linkedevents (indicated by the <code>publication_status</code> field) may\
        \ be either(<code>draft</code>) if the event is not published yet or (<code>public</code>)\
        \ for published events.</p>\n<p>You may filter events with only the desired\
        \ publication status with the <code>publication_status</code> filter.</p>\n\
        <p>Example:</p>\n<pre><code>event/?publication_status=draft</code></pre>\n\
        \n<h4 id=\"event-editable-events\">Only editable events</h4>\n<p><code>admin_user</code>\
        \ parameter displays all events authenticated user can edit, including drafts,\
        \ but no other  public events</p>\n<p>Example:</p>\n<pre><code>event/?admin_user=true</code></pre>\n\
        \n<h4 id=\"event-created-by\">Events created by the user</h4>\n<p><code>created_by</code>\
        \ parameter only displays events by the authenticated user</p>\n<p>Example:</p>\n\
        <pre><code>event/?created_by=true</code></pre>\n\n<h2 id=\"getting-detailed-data\"\
        >Getting detailed data</h2>\n<p>In the default case, keywords, locations,\
        \ and other fields that refer to separate resources are only displayed as\
        \ simple references.</p>\n<p>If you want to include the complete data from\
        \ related resources in the current response, use the keyword <code>include</code>.\
        \ <strong> Please note, however, that including all the resources inlined\
        \ in *every* event will result in a huge number of duplicate data in the json,\
        \ making the json very slow to generate and process and causing considerable\
        \ API load and long response times when too many such requests are made. Therefore,\
        \ if you are listing the maximum number of events (100) or updating your cache\
        \ with all events, please consider caching the keyword and location data separately\
        \ to prevent unnecessary API slowdown and continuous repeated work. Keyword\
        \ and location data seldom change and are easily fetched from their own endpoints\
        \ separately.</strong></p>\n<p>Example:</p>\n<pre><code>event/?include=location,keywords</code></pre>\n\
        \n<h2 id=\"ordering\">Ordering</h2>\n<p>Default ordering is descending order\
        \ by <code>-last_modified_time</code>. You may also order  results by <code>start_time</code>,\
        \ <code>end_time</code>, <code>name</code>, <code>duration</code>, <code>enrolment_start_time</code>,\
        \ <code>enrolment_end_time</code>, <code>registration__enrolment_start_time</code>,\
        \ <code>registration__enrolment_end_time</code>, <code>enrolment_start</code>\
        \ and <code>enrolment_end</code>. Descending order is denoted by adding <code>-</code>\
        \ in front of the parameter, default order is ascending.</p>\n<p>For example:</p>\n\
        <pre><code>event/?sort=-end_time</code></pre>\n\n<h3 id=\"enrolment-start-enrolment-end\"\
        >Enrolment start and enrolment end</h3>\n<p>The ordering filters <code>enrolment_start</code>\
        \ and <code>enrolment_end</code> have two\n    notable differences compared\
        \ to the rest of the ordering filters related to enrolment start\n    and\
        \ enrolment end times:</p>\n<p>First, if an event has a registration with\
        \ an enrolment time defined, the registration's time\n    will be preferred\
        \ over the event's time.</p>\n<p>Second, if neither the event's registration\
        \ nor the event has enrolment times defined\n    (<code>enrolment_start_time</code>\
        \ and <code>enrolment_end_time</code> are both NULL), the\n    event will\
        \ be placed at the end of the results list regardless of whether ascending\
        \ or\n    descending order was used.</p>\n"
      summary: Return a list of events
      parameters:
      - in: query
        name: admin_user
        schema:
          type: boolean
        description: Search for events that authenticated user can edit, including
          drafts, but no other public events.
      - in: query
        name: all_ongoing_AND
        schema:
          type: string
        description: Search for local and internet events that are upcoming or have
          not ended yet. Multiple search terms are separated by comma.
      - in: query
        name: all_ongoing_OR
        schema:
          type: string
        description: Search for local and internet events that are upcoming or have
          not ended yet. Multiple search terms are separated by comma.
      - in: query
        name: audience_max_age_gt
        schema:
          type: integer
        description: Search for events whose maximum age is greater than or equals
          the specified value.
      - in: query
        name: audience_max_age_lt
        schema:
          type: integer
        description: Search for events whose maximum age is lower than or equals the
          specified value.
      - in: query
        name: audience_min_age_gt
        schema:
          type: integer
        description: Search for events whose minimal age is greater than or equals
          the specified value.
      - in: query
        name: audience_min_age_lt
        schema:
          type: integer
        description: Search for events whose minimal age is lower than or equals the
          specified value.
      - in: query
        name: bbox
        schema:
          type: array
          items:
            type: string
        description: Search for events that are within this bounding box. Decimal
          coordinates are given in order west, south, east, north. Period is used
          as decimal separator. Coordinate system is EPSG:4326.
      - in: query
        name: combined_text
        schema:
          type: string
        description: Search for events with exact text match for event text fields
          but retrieves expected keywords on the basis of similarity.
      - in: query
        name: created_by
        schema:
          type: boolean
        description: Search for events created by the authenticated user.
      - in: query
        name: data_source
        schema:
          type: string
        description: Search for events that come from the specified source system.
      - in: query
        name: days
        schema:
          type: integer
        description: Search for events that intersect with the current time and specified
          amount of days from current time.
      - in: query
        name: division
        schema:
          type: string
        description: You may filter events by specific OCD division id, or by division
          name. The latter query checks all divisions with the name, regardless of
          division type.
      - in: query
        name: dwithin
        schema:
          type: string
      - in: query
        name: dwithin_meters
        schema:
          type: integer
        description: To restrict the retrieved events to a certain distance from a
          point, use the query parameters <code>dwithin_origin</code> and <code>dwithin_metres</code>
          in the format <code>dwithin_origin=lon,lat&dwithin_metres=distance</code>.
      - in: query
        name: dwithin_origin
        schema:
          type: array
          items:
            type: string
        description: To restrict the retrieved events to a certain distance from a
          point, use the query parameters <code>dwithin_origin</code> and <code>dwithin_metres</code>
          in the format <code>dwithin_origin=lon,lat&dwithin_metres=distance</code>.
      - in: query
        name: end
        schema:
          type: string
          format: date-time
        description: Search for events beginning or ending before this time. Dates
          can be specified using ISO 8601 (for example, '2024-01-12') and additionally
          <code>today</code> and <code>now</code>.
      - in: query
        name: ends_after
        schema:
          type: string
        description: Search for the events that end after certain time.
      - in: query
        name: ends_before
        schema:
          type: string
        description: Search for the events that end before certain time.
      - in: query
        name: enrolment_open
        schema:
          type: boolean
        description: Search for events that have connected registrations and have
          places at the event.
      - in: query
        name: enrolment_open_on
        schema:
          type: string
          format: date-time
        description: Search for events where enrolment is open on a given date or
          datetime.
      - in: query
        name: enrolment_open_waitlist
        schema:
          type: boolean
        description: Search for events that have connected registrations and have
          places in the waiting lists.
      - in: query
        name: event_status
        schema:
          type: string
        description: Search for events with the specified status in the <code>event_status</code>
          field.
      - in: query
        name: event_type
        schema:
          type: string
        description: Search for events with the specified type in the <code>type_id</code>
          field.
      - in: query
        name: format
        schema:
          type: string
          enum:
          - docx
          - json
          - json-ld
      - in: query
        name: hide_recurring_children
        schema:
          type: string
        description: Hide all child events for super events which are of type <code>recurring</code>.
      - in: query
        name: ids
        schema:
          type: string
        description: Search for events with specific id, separating values by commas
          if you wish to query for several event ids.
      - in: query
        name: in_language
        schema:
          type: string
        description: Search for events that are organized in this language.
      - in: query
        name: include
        schema:
          type: string
        description: Embed given reference-type fields, comma-separated if several,
          directly into the response, otherwise they are returned as URI references.
      - in: query
        name: internet_based
        schema:
          type: boolean
        description: Search only for events that happen in the internet.
      - in: query
        name: internet_ongoing_AND
        schema:
          type: string
        description: Search for internet events that are upcoming or have not ended
          yet. Multiple search terms are separated by comma.
      - in: query
        name: internet_ongoing_OR
        schema:
          type: string
        description: Search for internet events that are upcoming or have not ended
          yet. Multiple search terms are separated by comma.
      - in: query
        name: is_free
        schema:
          type: boolean
        description: Search for events that have a price that is free, or not free.
      - in: query
        name: keyword
        schema:
          type: string
        description: Search for events with given keywords as specified by id. Multiple
          ids are separated by comma.
      - in: query
        name: keyword!
        schema:
          type: string
        description: Search for events with given keywords not to be present as specified
          by id. Multiple ids are separated by comma.
      - in: query
        name: keyword_AND
        schema:
          type: string
        description: Search for events with all given keywords as specified by id.
          Multiple ids are separated by comma.
      - in: query
        name: keyword_set_AND
        schema:
          type: string
        description: Search for events that contains any of the keywords of defined
          keyword set. Multiple keyword sets are separated by comma.
      - in: query
        name: keyword_set_OR
        schema:
          type: string
        description: Search for events that contains any of the keywords of defined
          keyword set. Multiple keyword sets are separated by comma.
      - in: query
        name: language
        schema:
          type: string
        description: Search for events that have data or are organized in this language.
      - in: query
        name: last_modified_since
        schema:
          type: string
          format: date-time
        description: Search for events that have been modified since or at this time.
      - in: query
        name: local_ongoing_AND
        schema:
          type: string
        description: Search for local events that are upcoming or have not ended yet.
          Multiple search terms are separated by comma.
      - in: query
        name: local_ongoing_OR
        schema:
          type: string
        description: Search for local events that are upcoming or have not ended yet.
          Multiple search terms are separated by comma.
      - in: query
        name: location
        schema:
          type: string
        description: Search for events in given locations as specified by id. Multiple
          ids are separated by comma.
      - in: query
        name: max_duration
        schema:
          type: integer
        description: Search for events that are shorter than given time in seconds.
      - in: query
        name: maximum_attendee_capacity_gte
        schema:
          type: integer
        description: Search for events with maximum attendee capacity greater than
          or equal the applied parameter.
      - in: query
        name: maximum_attendee_capacity_lte
        schema:
          type: integer
        description: Search for events events with maximum attendee capacity less
          than or equal the applied parameter.
      - in: query
        name: min_duration
        schema:
          type: integer
        description: Search for events that are longer than given time in seconds.
      - in: query
        name: minimum_attendee_capacity_gte
        schema:
          type: integer
        description: Search for events with minimum attendee capacity greater than
          or equal the applied parameter.
      - in: query
        name: minimum_attendee_capacity_lte
        schema:
          type: integer
        description: Search for events events with minimum attendee capacity less
          than or equal the applied parameter.
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 100 is the maximum value
          for page_size.
        schema:
          type: integer
      - in: query
        name: publication_status
        schema:
          type: string
        description: Search for events with the given publication status. Multiple
          values are separated by comma.
      - in: query
        name: publisher
        schema:
          type: string
        description: Search for events published by the given organization as specified
          by id.
      - in: query
        name: publisher_ancestor
        schema:
          type: string
        description: Search for events published by any suborganization under the
          given organization as specified by id.
      - in: query
        name: registration
        schema:
          type: boolean
        description: Search for events with or without a registration.
      - in: query
        name: registration__remaining_attendee_capacity__gte
        schema:
          type: integer
        description: Search for events where the remaining registration attendee capacity
          is greater than or equal to the applied parameter.
      - in: query
        name: registration__remaining_attendee_capacity__isnull
        schema:
          type: boolean
        description: Search for events where the remaining registration attendee capacity
          is or is not NULL.
      - in: query
        name: registration__remaining_waiting_list_capacity__gte
        schema:
          type: integer
        description: Search for events where the remaining registration waiting_list
          capacity is greater than or equal to the applied parameter.
      - in: query
        name: registration__remaining_waiting_list_capacity__isnull
        schema:
          type: boolean
        description: Search for events where the remaining registration waiting_list
          capacity is or is not NULL.
      - in: query
        name: registration_admin_user
        schema:
          type: boolean
        description: Search for events whose registration the user can modify.
      - in: query
        name: show_all
        schema:
          type: boolean
        description: Search for events that authenticated user can edit, including
          drafts, and public non-editable events.
      - in: query
        name: show_deleted
        schema:
          type: boolean
        description: Include deleted events in the query.
      - in: query
        name: sort
        schema:
          type: string
        description: Sort the returned events in the given order. Possible sorting
          criteria are <code>start_time</code>, <code>end_time</code>, <code>name</code>,
          <code>duration</code>, <code>last_modified_time</code>, <code>enrolment_start_time</code>,
          <code>enrolment_end_time</code>, <code>registration__enrolment_start_time</code>,
          <code>registration__enrolment_end_time</code>, <code>enrolment_start</code>
          and <code>enrolment_end</code>. The default ordering is <code>-last_modified_time</code>.
      - in: query
        name: start
        schema:
          type: string
          format: date-time
        description: Search for events beginning or ending after this time. Dates
          can be specified using ISO 8601 (for example, '2024-01-12') and additionally
          <code>today</code> and <code>now</code>.
      - in: query
        name: starts_after
        schema:
          type: string
        description: Search for the events that start after certain time.
      - in: query
        name: starts_before
        schema:
          type: string
        description: Search for the events that start before certain time.
      - in: query
        name: suitable_for
        schema:
          type: integer
        description: Search for events that are suitable for the age or age range
          specified.
      - in: query
        name: super_event
        schema:
          type: string
        description: Search for events with the given superevent as specified by id,
          including none. Multiple ids are separated by comma.
      - in: query
        name: super_event_type
        schema:
          type: string
          x-spec-enum-id: 0f1c2ffe46ac2001
          nullable: true
          enum:
          - ''
          - null
          - recurring
          - umbrella
        description: Search for events with the given superevent type, including none.
          Multiple types are separated by comma.
      - in: query
        name: text
        schema:
          type: string
        description: Search (case insensitive) through all multilingual text fields
          (name, description, short_description, info_url) of an event (every language).
          Multilingual fields contain the text that users are expected to care about,
          thus multilinguality is useful discriminator.
      - in: query
        name: translation
        schema:
          type: string
        description: Search for events that have data in this language.
      tags:
      - event
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedEventList'
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                $ref: '#/components/schemas/PaginatedEventList'
          description: ''
    post:
      operationId: event_create
      summary: Create a new event or events
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - docx
          - json
          - json-ld
      tags:
      - event
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'
          application/ld+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Event'
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                $ref: '#/components/schemas/Event'
          description: Event has been successfully created.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
    put:
      operationId: event_bulk_update
      description: Events can be updated if the user has appropriate access permissions.
        The original implementation behaves like PATCH, ie. if some field is left
        out from the PUT call, its value is retained in database. In order to ensure
        consistent behaviour, users should always supply every field in PUT call.
      summary: Bulk update several events
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - docx
          - json
          - json-ld
      tags:
      - event
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'
          application/ld+json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Event'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedEventList'
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                $ref: '#/components/schemas/PaginatedEventList'
          description: Events have been successfully updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
  /event/{id}/:
    get:
      operationId: event_retrieve
      summary: Retrieve information for a single event
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - docx
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this event.
        required: true
      tags:
      - event
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Event'
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                $ref: '#/components/schemas/Event'
          description: Event record.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Event was not found.
    put:
      operationId: event_update
      description: Events can be updated if the user has appropriate access permissions.
        The original implementation behaves like PATCH, ie. if some field is left
        out from the PUT call, its value is retained in database. In order to ensure
        consistent behaviour, users should always supply every field in PUT call.
      summary: Update an event
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - docx
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this event.
        required: true
      tags:
      - event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Event'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Event'
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                $ref: '#/components/schemas/Event'
          description: Event has been successfully updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Event was not found.
    patch:
      operationId: event_partial_update
      summary: Partially update an event
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - docx
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this event.
        required: true
      tags:
      - event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Event'
            application/vnd.openxmlformats-officedocument.wordprocessingml.document:
              schema:
                $ref: '#/components/schemas/Event'
          description: Event has been successfully partially updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Event was not found.
    delete:
      operationId: event_destroy
      description: Event can be deleted if the user has appropriate access permissions.
      summary: Delete an event
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - docx
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this event.
        required: true
      tags:
      - event
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '204':
          description: Event has been successfully deleted.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Event was not found.
  /image/:
    get:
      operationId: image_list
      description: '<h2 id="using-image-endpoint">Using the image endpoint</h2>

        <p>Here, images for events are listed. Default ordering is decreasing order
        by <code>-last_modified_time</code>.</p>

        <h4 id="image-text">Image text</h4>

        <p>To find images that contain a specific string, use the query parameter
        <code>text</code>.</p>

        <p>Example:</p>

        <pre><code>image/?text=lapset</code></pre>


        <h3 id="image-publisher">Image publisher</h3>

        <p>To find out images that are published by a specific organization, use the
        query parameter <code>publisher</code>, separating values by commas if you
        wish to query for several publishers.</p>

        <p>Existing publisher organizations are found at the <code>organization</code>
        endpoint.</p>

        <p>Example:</p>

        <pre><code>image/?publisher=ytj:0586977-6</code></pre>


        <h3 id="image-data-source">Image data source</h3>

        <p>To find out images that originate from a specific source system, use the
        query parameter <code>data_source</code>, separating values by commas if you
        wish to query for several data sources.</p>

        <p>Example:</p>

        <pre><code>image/?data_source=helmet</code></pre>


        <h3 id="image-created-by">Images created by the authenticated user</h3>

        <p>To find out images that have been created by the current authenticated
        user, use the parameter <code>created_by</code>.</p>

        <p>Example:</p>

        <pre><code>image/?created_by=true</code></pre>


        <h4 id="ordering">Ordering</h4>

        <p>Default ordering is descending order by <code>-last_modified_time</code>.
        You may also order results by <code>id</code> and <code>name</code>.</p>

        <p>For example:</p>

        <pre><code>image/?sort=name</code></pre>

        '
      summary: Return a list of images
      parameters:
      - in: query
        name: created_by
        schema:
          type: boolean
        description: Search for images created by the authenticated user.
      - in: query
        name: data_source
        schema:
          type: string
        description: Search for images that come from the specified source system.
          Multiple data sources are separated by comma.
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: query
        name: include
        schema:
          type: string
        description: Embed given reference-type fields, comma-separated if several,
          directly into the response, otherwise they are returned as URI references.
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 1000 is the maximum value
          for page_size.
        schema:
          type: integer
      - in: query
        name: publisher
        schema:
          type: string
        description: Search for images published by the given organization as specified
          by id. Multiple ids are separated by comma.
      - in: query
        name: sort
        schema:
          type: string
        description: Default ordering is descending order by <code>-last_modified_time</code>.
          You may also order results by <code>id</code> and <code>name</code>.
      - in: query
        name: text
        schema:
          type: string
        description: Search images that contain a specific string.
      tags:
      - image
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedImageList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedImageList'
          description: ''
    post:
      operationId: image_create
      description: There are two ways to create an image object. The image file can
        be posted as a multipart request, but the endpoint also accepts a simple JSON
        object with an external url in the url field. This allows using external images
        for events without saving them on the API server.
      summary: Create a new image
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      tags:
      - image
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageCreate'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Image'
          description: Image has been successfully created.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
  /image/{id}/:
    get:
      operationId: image_retrieve
      summary: Return information for a single image
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - image
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Image'
          description: Image record.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Image was not found.
    put:
      operationId: image_update
      description: Image can be updated if the user has appropriate access permissions.
        The original implementation behaves like PATCH, ie. if some field is left
        out from the PUT call, its value is retained in database. In order to ensure
        consistent behaviour, users should always supply every field in PUT call.
      summary: Update an image
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - image
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Image'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Image'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Image'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Image'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Image'
          description: Image has been successfully updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Image was not found.
    patch:
      operationId: image_partial_update
      summary: Partially update an image
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - image
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedImage'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/PatchedImage'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedImage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedImage'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Image'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Image'
          description: Image has been successfully partially updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Image was not found.
    delete:
      operationId: image_destroy
      description: Image can be deleted if the user has appropriate access permissions.
      summary: Delete an image
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this image.
        required: true
      tags:
      - image
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '204':
          description: Image has been successfully deleted.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Image was not found.
  /keyword/:
    get:
      operationId: keyword_list
      description: '<h2 id="using-keyword-endpoint">Using the keyword endpoint</h2>

        <p>Here, categories for events are listed. Events in each category can be
        found at the <code>event</code> endpoint using the query parameter <code>keyword</code>.
        The common keywords used in all events originate from the <a href="https://finto.fi/yso/en/">general
        Finnish ontology (yso)</a>, hence the format <code>yso:p4354</code>. Default
        ordering is decreasing order by the number of events found.</p>

        <p>The most common event categories are listed in the two keyword sets <a
        href="https://api.hel.fi/linkedevents/v1/keyword_set/helsinki:topics/">helsinki:topics</a>
        and <a href="https://api.hel.fi/linkedevents/v1/keyword_set/helsinki:audiences/">helsinki:audiences</a>,
        which list the YSO keywords that are present in most events to specify event
        main topic and audience.</p>


        <h4 id="keyword-text">Keyword text</h4>

        <p>To find keywords that contain a specific string, use the query parameter
        <code>text</code> or <code>filter</code>. Both <code>text</code> and <code>filter</code>
        work the same way, but the latter can be used, for example, with typeahead.js.</p>

        <p>Example:</p>

        <pre><code>keyword/?text=lapset</code></pre>


        <h4 id="keyword-free-text">Free text</h4>

        <p>While the previous search is looking for the keywords containg exact matches
        of the search string, <code>free_text</code> retrieves keywords on the basis
        of similarity. Results are sorted by similarity.</p>

        <p>Example:</p>

        <pre><code>keyword/?free_text=lapppset</code></pre>


        <h4 id="keyword-source">Keyword source</h4>

        <p>Will restrict keywords to a specific data source.</p>

        <p>Example:</p>

        <pre><code>keyword/?data_source=yso</code></pre>


        <h4 id="show-keywords-with-upcoming-events">Show only keywords with the upcoming
        events</h4>

        <p>To show only the keywords which are used in the upcoming events supply
        the <code>has_upcoming_events</code> query parameter.</p>

        <p>For example:</p>

        <pre><code>keyword/?has_upcoming_events=true</code></pre>


        <h4 id="showing-all-keyword">Showing all keywords</h4>

        <p>By default, only those keywords which have listed events are displayed.
        You may display keywords with zero <code>n_events</code> with the query parameter
        <code>show_all_keywords</code>.</p>

        <p>For example:</p>

        <pre><code>keyword/?show_all_keywords=true</code></pre>


        <h4 id="showing-deprecated-keyword">Showing deprecated keywords</h4>

        <p>By default, deprecated keywords are not displayed. You may also display
        deprecated keywords with the query parameter <code>show_deprecated</code>.</p>

        <p>For example:</p>

        <pre><code>keyword/?show_deprecated=true</code></pre>


        <h4 id="ordering">Ordering</h4>

        <p>Default ordering is primarily decreasing order by data_source, secondarily
        decreasing order by the number of events found and tertiarily ascending order
        by name. You may order results by <code>n_events</code>, <code>id</code>,
        <code>name</code> and <code>data_source</code>.</p>

        <p>For example:</p>

        <pre><code>keyword/?sort=name</code></pre>

        '
      summary: Return a list of keywords used for describing events
      parameters:
      - in: query
        name: data_source
        schema:
          type: string
        description: 'Search for keywords (<b>note</b>: NOT events) that come from
          the specified data source (see data source in keyword definition).'
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: query
        name: free_text
        schema:
          type: string
        description: While the <code>text</code> search is looking for the keywords
          containg exact matches of the search string, <code>free_text</code> retrieves
          keywords on the basis of similarity. Results are sorted by similarity.
      - in: query
        name: has_upcoming_events
        schema:
          type: boolean
        description: To show only the keywords which are used in the upcoming events
          supply the <code>has_upcoming_events</code> query parameter.
      - in: query
        name: include
        schema:
          type: string
        description: Embed given reference-type fields, comma-separated if several,
          directly into the response, otherwise they are returned as URI references.
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 100 is the maximum value
          for page_size.
        schema:
          type: integer
      - in: query
        name: show_all_keywords
        schema:
          type: boolean
        description: Show all keywords, including those that are not associated with
          any events. Otherwise such keywords are hidden. When <code>show_all_keywords</code>
          is specified, no other filter is applied, <b>except</b> <code>filter</code>
          and <code>text</code> (match for keywords beginning with string).
      - in: query
        name: show_deprecated
        schema:
          type: boolean
        description: Show all keywords, including those that are deprecated. By default
          such keywords are hidden. When <code>show_all_keywords</code> is specified,
          no other filter is applied, <b>except</b> <code>filter</code> and <code>text</code>
          (match for keywords beginning with string).
      - in: query
        name: sort
        schema:
          type: string
        description: Sort the returned keywords in the given order. Possible sorting
          criteria are <code>n_events</code>, <code>id</code>, <code>name</code> and
          <code>data_source</code>. The default ordering is <code>-data_source</code>,
          <code>-n_events</code>, <code>name</code>.
      - in: query
        name: text
        schema:
          type: string
        description: 'Search for keywords (<b>note</b>: NOT events) that contain the
          given string. This applies even when <code>show_all_keywords</code> is specified.
          Alternative name for the parameter is <code>filter</code>.'
      tags:
      - keyword
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedKeywordList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedKeywordList'
          description: ''
    post:
      operationId: keyword_create
      summary: Create a new keyword
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      tags:
      - keyword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Keyword'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Keyword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Keyword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Keyword'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Keyword'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Keyword'
          description: ''
  /keyword/{id}/:
    get:
      operationId: keyword_retrieve
      summary: Retrieve information about a single keyword
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this keyword.
        required: true
      tags:
      - keyword
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Keyword'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Keyword'
          description: Keyword record.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Keyword was not found.
    put:
      operationId: keyword_update
      description: Keyword can be updated if the user has appropriate access permissions.
        The original implementation behaves like PATCH, ie. if some field is left
        out from the PUT call, its value is retained in database. In order to ensure
        consistent behaviour, users should always supply every field in PUT call.
      summary: Update a keyword
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this keyword.
        required: true
      tags:
      - keyword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Keyword'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Keyword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Keyword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Keyword'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Keyword'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Keyword'
          description: Keyword has been successfully partially updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Keyword was not found.
    patch:
      operationId: keyword_partial_update
      summary: Partially update a keyword
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this keyword.
        required: true
      tags:
      - keyword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedKeyword'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/PatchedKeyword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedKeyword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedKeyword'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Keyword'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Keyword'
          description: Keyword has been successfully partially updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Keyword was not found.
    delete:
      operationId: keyword_destroy
      description: Keyword can be deleted if the user has appropriate access permissions.
      summary: Delete a keyword
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this keyword.
        required: true
      tags:
      - keyword
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '204':
          description: Keyword has been successfully deleted.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Keyword was not found.
  /keyword_set/:
    get:
      operationId: keyword_set_list
      description: '<h2 id="using-keyword-set-endpoint">Using the keyword set endpoint</h2>

        <p>Here, the preferred sets of common keywords are listed.</p>

        <p>We recommend using the 20 piece keyword set <code>helsinki:topics</code>
        for general event grouping and <code>helsinki:audiences</code> for sorting
        by target group. These sets are used by the City of Helsinki in categorizing
        the majority of events in the API.</p>


        <h3 id="text">Search keyword sets</h3>

        <p>Search keyword sets by id and name. Covers Finnish, English and Swedish
        name.</p>

        <p>Example:</p>

        <pre><code>keyword_set/?text=topic</code></pre>


        <h3 id="sort">Sorting keyword sets</h3>

        <p>It is possible to sort the keyword sets by <code>name</code>, <code>usage</code>,
        and <code>id</code> in either ascending or descending order.</p>

        <p>Example:</p>

        <pre><code>keyword_set/?sort=id</code></pre>

        '
      summary: Return a list of keyword sets for grouping keywords
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: query
        name: include
        schema:
          type: string
        description: Embed given reference-type fields, comma-separated if several,
          directly into the response, otherwise they are returned as URI references.
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 100 is the maximum value
          for page_size.
        schema:
          type: integer
      - in: query
        name: sort
        schema:
          type: string
        description: Sort the returned keyword sets in the given order. Possible sorting
          criteria are <code>name</code>, <code>usage</code> and <code>data_source.</code>
      - in: query
        name: text
        schema:
          type: string
        description: Search for keyword sets that contain the given string in name
          or id fields.
      tags:
      - keyword_set
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedKeywordSetList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedKeywordSetList'
          description: ''
    post:
      operationId: keyword_set_create
      summary: Create a new keyword set
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      tags:
      - keyword_set
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeywordSet'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/KeywordSet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/KeywordSet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/KeywordSet'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordSet'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/KeywordSet'
          description: Keyword set has been successfully created.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
  /keyword_set/{id}/:
    get:
      operationId: keyword_set_retrieve
      summary: Return information about single keyword set
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this keyword set.
        required: true
      tags:
      - keyword_set
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordSet'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/KeywordSet'
          description: Keyword set record.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Keyword set was not found.
    put:
      operationId: keyword_set_update
      description: Keyword set can be updated if the user has appropriate access permissions.
        The original implementation behaves like PATCH, ie. if some field is left
        out from the PUT call, its value is retained in database. In order to ensure
        consistent behaviour, users should always supply every field in PUT call.
      summary: Update a keyword set
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this keyword set.
        required: true
      tags:
      - keyword_set
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KeywordSet'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/KeywordSet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/KeywordSet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/KeywordSet'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordSet'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/KeywordSet'
          description: Keyword set has been successfully updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Keyword set was not found.
    patch:
      operationId: keyword_set_partial_update
      summary: Partially update a keyword set
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this keyword set.
        required: true
      tags:
      - keyword_set
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedKeywordSet'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/PatchedKeywordSet'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedKeywordSet'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedKeywordSet'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KeywordSet'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/KeywordSet'
          description: Keyword set has been successfully partially updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Keyword set was not found.
    delete:
      operationId: keyword_set_destroy
      description: Keyword set can be deleted if the user has appropriate access permissions.
      summary: Delete a keyword set
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this keyword set.
        required: true
      tags:
      - keyword_set
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '204':
          description: Keyword set has been successfully deleted.
        '404':
          description: Keyword set was not found.
  /language/:
    get:
      operationId: language_list
      description: '<h2 id="using-language-endpoint">Using the language endpoint</h2>

        <p>Returns the list of languages used for describing events and registrations
        in this Linked events instance. The languages are also used when translating
        the user interface and email messages for end-users.</p>


        <h4 id="showing-service-languages">Showing service languages</h4>

        <p>By default, all languages are shown. To show only service languages or
        languages that are not service languages, you can use the boolean parameter
        <code>service_language</code>.</p>

        <p>For example:</p>

        <pre><code>language/?service_language=true</code></pre>

        '
      summary: Return a list of languages used for describing events and registrations
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 100 is the maximum value
          for page_size.
        schema:
          type: integer
      - in: query
        name: service_language
        schema:
          type: boolean
        description: Show only service languages or languages that are not service
          languages.
      tags:
      - language
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLanguageList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedLanguageList'
          description: ''
  /language/{id}/:
    get:
      operationId: language_retrieve
      description: Can be used to retrieve translations for a single language.
      summary: Return information for a single language
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this language.
        required: true
      tags:
      - language
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Language'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Language'
          description: ''
  /organization/:
    get:
      operationId: organization_list
      description: '<h2 id="using-organization-endpoint">Using the organization endpoint</h2>

        <p>Here, the event publisher organizations are listed. Events published by
        each organization can be found at the <code>event</code> endpoint using the
        query parameter <code>publisher</code>.</p>


        <h4 id="organization-child">Organization ancestors</h4>

        <p>To find parent organization and all its ancestors for the given organization
        id use the query parameter <code>child</code>.</p>

        <p>Example:</p>

        <pre><code>organization/?child=ahjo:100</code></pre>

        <p><a href="?child=ahjo:100" title="json">See the result</a></p>


        <h4 id="organization-parent">Organization descendants</h4>

        <p>To find all suborganizations and their descendants for the given organization
        id use the query parameter <code>parent</code>.</p>

        <p>Example:</p>

        <pre><code>organization/?parent=ahjo:100</code></pre>

        <p><a href="?parent=ahjo:100" title="json">See the result</a></p>


        <h4 id="organization-dissolved">Dissolved organizations</h4>

        <p>To filter organizations based on their dissolution date use the parameter
        <code>dissolved</code>.

        The filter is boolean type and can be used to show only dissolved organizations
        (true) or exclude them (false).</p>


        <p>Get only dissolved organizations</p>

        <p>Example:</p>

        <pre><code>organization/?dissolved=true</code></pre>

        <p><a href="?dissolved=true" title="json">See the result</a></p>


        <p>Get organizations not dissolved</p>

        <p>Example:</p>

        <pre><code>organization/?dissolved=false</code></pre>

        <p><a href="?dissolved=false" title="json">See the result</a></p>

        '
      summary: Return a list of organizations that publish events
      parameters:
      - in: query
        name: child
        schema:
          type: string
        description: Get the parent organization and all its ancestors for the given
          organization id.
      - in: query
        name: dissolved
        schema:
          type: string
        description: Get or exclude dissolved organizations; <code>true</code> shows
          only dissolved and <code>false</code> excludes dissolved organizations.
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 100 is the maximum value
          for page_size.
        schema:
          type: integer
      - in: query
        name: parent
        schema:
          type: string
        description: Get all suborganizations and their descendants for the given
          organization id.
      tags:
      - organization
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrganizationListList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedOrganizationListList'
          description: ''
    post:
      operationId: organization_create
      summary: Create a new organization
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      tags:
      - organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDetail'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/OrganizationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrganizationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrganizationDetail'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDetail'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/OrganizationDetail'
          description: Organization has been successfully created.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
  /organization/{id}/:
    get:
      operationId: organization_retrieve
      summary: Return information for a single organization
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this organization.
        required: true
      tags:
      - organization
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDetail'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/OrganizationDetail'
          description: Organization record.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Organization was not found.
    put:
      operationId: organization_update
      description: Organization can be updated if the user has appropriate access
        permissions. The original implementation behaves like PATCH, ie. if some field
        is left out from the PUT call, its value is retained in database. In order
        to ensure consistent behaviour, users should always supply every field in
        PUT call.
      summary: Update an organization
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this organization.
        required: true
      tags:
      - organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrganizationDetail'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/OrganizationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OrganizationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OrganizationDetail'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDetail'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/OrganizationDetail'
          description: Organization has been successfully updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Organization was not found.
    patch:
      operationId: organization_partial_update
      summary: Partially update an organization
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this organization.
        required: true
      tags:
      - organization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrganizationDetail'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/PatchedOrganizationDetail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrganizationDetail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrganizationDetail'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationDetail'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/OrganizationDetail'
          description: Organization has been successfully partially updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Organization was not found.
    delete:
      operationId: organization_destroy
      description: Organization can be deleted if the user has appropriate access
        permissions.
      summary: Delete an organization
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this organization.
        required: true
      tags:
      - organization
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '204':
          description: Organization has been successfully deleted.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Organization was not found.
  /organization/{id}/accounts/:
    get:
      operationId: organization_accounts_list
      description: Returns a list of accounts for an organization. If the organization
        itself does not have accounts, they will be returned from the closest ancestor
        that has them. Only admin users are allowed to use this endpoint.
      summary: Return a list of accounts for an organization
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this organization.
        required: true
      tags:
      - organization
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWebStoreAccountList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedWebStoreAccountList'
          description: ''
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Web store integration is not enabled.
  /organization/{id}/merchants/:
    get:
      operationId: organization_merchants_list
      description: Returns a list of merchants for an organization. If the organization
        itself does not have merchants, they will be returned from the closest ancestor
        that has them. Only admin users are allowed to use this endpoint.
      summary: Return a list of merchants for an organization
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this organization.
        required: true
      tags:
      - organization
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedWebStoreMerchantList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedWebStoreMerchantList'
          description: ''
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Web store integration is not enabled.
  /organization_class/:
    get:
      operationId: organization_class_list
      description: The returned list describes organization classes used for organization
        classification. Only admin users are allowed to use this endpoint.
      summary: Return a list of organization classes
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 100 is the maximum value
          for page_size.
        schema:
          type: integer
      tags:
      - organization_class
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedOrganizationClassList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedOrganizationClassList'
          description: ''
  /organization_class/{id}/:
    get:
      operationId: organization_class_retrieve
      description: Can be used to retrieve a single organization class. Only admin
        users are allowed to use this endpoint
      summary: Return information for a single organization class
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this Organization class.
        required: true
      tags:
      - organization_class
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganizationClass'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/OrganizationClass'
          description: ''
  /place/:
    get:
      operationId: place_list
      description: '<h2 id="using-place-endpoint">Using the place endpoint</h2>

        <p>Here, locations for events are listed. Events in each location can be found
        at the <code>event</code> endpoint using the query parameter <code>location</code>.
        Most locations use the id format <code>tprek:28473</code>. An easy way to
        locate service points is to browse our <a href="https://servicemap.hel.fi">Service
        Map</a>, which uses the same location ids, e.g. <code>servicemap.hel.fi/unit/28473</code>.
        Default ordering is decreasing order by the number of events found.</p>


        <h4 id="place-text">Place text</h4>

        <p>To find places that contain a specific string, use the query parameter
        <code>text</code> or <code>filter</code>. Both <code>text</code> and <code>filter</code>
        work the same way, but the latter can be used, for example, with typeahead.js.</p></p>

        <p>Example:</p>

        <pre><code>place/?text=tuomiokirkko</code></pre>


        <h4 id="district">District</h4>

        <p>To restrict the retrieved places to city district(s), use the query parameter
        <code>division</code>, separating values by commas if you wish to query for
        several divisions.</p>

        <p>City of Helsinki neighborhoods (kaupunginosa), districts (peruspiiri) and
        subdistricts (osa-alue) are supported. <a href="http://kartta.hel.fi/?setlanguage=en&e=25498873&n=6674660&r=16&w=***&l=Karttasarja%2Ckaupunginosat%2Cosaalueet_WFS%2Cperuspiiri_WFS&o=100%2C100%2C100%2C100&swtab=kaikki">
        Check the divisions on the Helsinki map service.</a></p>

        <p>You may query either by specific OCD division type <code>peruspiiri:malmi</code>,
        or by division name <code>malmi</code>. The latter query checks all divisions
        with the name, regardless of division type.</p>

        <p>Example:</p>

        <pre><code>place/?division=malmi</code></pre>


        <h4 id="place-source">Place source</h4>

        <p>Will restrict places to a specific data source.</p>

        <p>Example:</p>

        <pre><code>place/?data_source=tprek</code></pre>


        <h4 id="show-places-with-upcoming-events">Show only places with the upcoming
        events</h4>

        <p>To show only the places which are used in the upcoming events supply the
        <code>has_upcoming_events</code> query parameter.</p>

        <p>Example:</p>

        <pre><code>place/?has_upcoming_events=true</code></pre>


        <h4 id="showing-all-places">Showing all places</h4>

        <p>By default, only those locations which have listed events are displayed.
        You may display locations with zero <code>n_events</code> with the query parameter
        <code>show_all_places</code>.</p>

        <p>Example:</p>


        <h4 id="showing-deleted-places">Showing deleted places</h4>

        <p>By default, deleted places are not displayed. You may also display deleted
        places with the query parameter <code>show_deleted</code>.</p>

        <p>For example:</p>

        <pre><code>place/?show_deleted=true</code></pre>


        <h4 id="ordering">Ordering</h4>

        <p>Default ordering is decreasing order by the number of events found. You
        may also order results by <code>name</code>, <code>street_address</code> or
        <code>postal_code</code>.</p>

        <p>For example:</p>

        <pre><code>place/?sort=name</code></pre>

        '
      summary: Return a list of places used for describing events
      parameters:
      - in: query
        name: data_source
        schema:
          type: string
        description: Search for places that come from the specified source system.
      - in: query
        name: division
        schema:
          type: integer
        description: You may filter places by specific OCD division id, or by division
          name. The latter query checks all divisions with the name, regardless of
          division type.
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: query
        name: has_upcoming_events
        schema:
          type: boolean
        description: To show only the places which are used in the upcoming events
          supply the <code>has_upcoming_events</code> query parameter.
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 100 is the maximum value
          for page_size.
        schema:
          type: integer
      - in: query
        name: show_all_places
        schema:
          type: boolean
        description: Show all places, including those that are not hosting any events.
          Otherwise such places are hidden. When show_all_places is specified, no
          other filter is applied.
      - in: query
        name: show_deleted
        schema:
          type: boolean
        description: Show all keywords, including those that are deleted. By default
          such keywords are hidden.
      - in: query
        name: sort
        schema:
          type: string
        description: Sort the returned places in the given order. Possible sorting
          criteria are <code>n_events</code>, <code>id</code>, <code>name</code>,
          <code>street_address</code> and <code>postal_code</code>. The default ordering
          is <code>-n_events</code>.
      - in: query
        name: text
        schema:
          type: string
        description: Search for places that contain the given string. This applies
          even when show_all_places is specified. Alternative name for the parameter
          is <code>filter</code>.
      tags:
      - place
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPlaceList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedPlaceList'
          description: ''
    post:
      operationId: place_create
      summary: Create a new place
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      tags:
      - place
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Place'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Place'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Place'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Place'
          description: Place has been successfully created.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
  /place/{id}/:
    get:
      operationId: place_retrieve
      summary: Return information for a single place
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this place.
        required: true
      tags:
      - place
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Place'
          description: Place record.
    put:
      operationId: place_update
      description: Place can be updated if the user has appropriate access permissions.
        The original implementation behaves like PATCH, ie. if some field is left
        out from the PUT call, its value is retained in database. In order to ensure
        consistent behaviour, users should always supply every field in PUT call.
      summary: Update a place
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this place.
        required: true
      tags:
      - place
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Place'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Place'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Place'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Place'
          description: Place has been successfully updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Place was not found.
    patch:
      operationId: place_partial_update
      summary: Partially update a place
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this place.
        required: true
      tags:
      - place
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPlace'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/PatchedPlace'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPlace'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPlace'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Place'
          description: Place has been successfully partially updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Place was not found.
    delete:
      operationId: place_destroy
      description: Place can be deleted if the user has appropriate access permissions.
      summary: Delete a place
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this place.
        required: true
      tags:
      - place
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '404':
          description: Place was not found.
  /price_group/:
    get:
      operationId: price_group_list
      description: '<h2 id="filtering-retrieved-customer-groups">Filtering retrieved
        customer groups</h2>

        <p>Query parameters can be used to filter the retrieved customer groups by
        the following criteria.</p>


        <h3 id="customer-group-publisher">Publisher</h3>

        <p>To find out customer groups that belong to a specific organization or that
        are default customer groups available to all organizations, use the query
        parameter <code>publisher</code>, separating values by commas if you wish
        to query for several publishers.</p>

        <p>Existing organizations are found at the <code>organization</code> endpoint.
        City of Helsinki internal publishers have ids of the form <code>ahjo:origin_id</code>
        as they originate from the Helsinki Ahjo decisionmaking system, and have a
        rather complex hierarchy. External publishers may have their own namespaces,
        ids and hierarchies.</p>

        <p>The id <code>none</code> can be used for default customer groups that do
        not belong to any specific organization. This id can be combined with actual
        organization ids using the comma separator.</p>

        <p>Example:</p>

        <pre><code>event/?publisher=ytj:0586977-6</code></pre>

        <pre><code>event/?publisher=none</code></pre>


        <h3 id="customer-group-description">Description</h3>

        <p>To find out customer groups that contain a specific string in the "description"
        field, use the query parameter <code>description</code>.</p>

        <p>Example:</p>

        <pre><code>price_group/?description=adult</code></pre>


        <h3 id="customer-group-is-free">Is free</h3>

        <p>To find out customer groups that are free of charge or vice versa, use
        the query parameter<code>is_free</code>.</p>

        <p>Example:</p>

        <pre><code>price_group/?is_free=true</code></pre>

        '
      summary: Return a list of customer groups
      parameters:
      - in: query
        name: description
        schema:
          type: string
        description: Search (case insensitive) through customer groups' multilingual
          description field.
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: query
        name: is_free
        schema:
          type: boolean
        description: Search for customer groups that are free of charge or that have
          a price.
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 100 is the maximum value
          for page_size.
        schema:
          type: integer
      - in: query
        name: publisher
        schema:
          type: string
        description: Search for customer groups belonging to an organization as specified
          by id. Multiple ids are separated by comma. Use the value <code>none</code>
          for default customer groups.
      - in: query
        name: sort
        schema:
          type: string
        description: 'Sort the returned customer groups in the given order by ''description''. '
      tags:
      - price_group
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPriceGroupList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedPriceGroupList'
          description: ''
    post:
      operationId: price_group_create
      summary: Create a new customer group
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      tags:
      - price_group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceGroup'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/PriceGroup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PriceGroup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PriceGroup'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceGroup'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PriceGroup'
          description: Customer group has been successfully created.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
  /price_group/{id}/:
    get:
      operationId: price_group_retrieve
      summary: Return information for a single customer group
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this price group.
        required: true
      tags:
      - price_group
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '404':
          description: Customer group was not found.
    put:
      operationId: price_group_update
      description: Customer group can be updated if the user has appropriate access
        permissions. Default customer groups cannot be updated.
      summary: Update a customer group
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this price group.
        required: true
      tags:
      - price_group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceGroup'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/PriceGroup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PriceGroup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PriceGroup'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceGroup'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PriceGroup'
          description: Customer group has been successfully updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Customer group was not found.
    patch:
      operationId: price_group_partial_update
      summary: Partially update a customer group
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this price group.
        required: true
      tags:
      - price_group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPriceGroup'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/PatchedPriceGroup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPriceGroup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPriceGroup'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PriceGroup'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PriceGroup'
          description: Customer group has been successfully partially updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Customer group was not found.
    delete:
      operationId: price_group_destroy
      description: Customer group can be deleted if the user has appropriate access
        permissions. Default customer groups cannot be deleted.
      summary: Delete a customer group
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this price group.
        required: true
      tags:
      - price_group
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '204':
          description: Customer group has been successfully deleted.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Customer group was not found.
  /registration/:
    get:
      operationId: registration_list
      description: '<h2 id="filtering-retrieved-registration">Filtering retrieved
        registration</h2>

        <p>Query parameters can be used to filter the retrieved registrations by the
        following criteria.</p>


        <h3 id="event-text">Event text</h3>

        <p>To find out registrations that contain a specific string in any of its
        event''s text fields, use the query parameter <code>text</code>.</p>

        <p>Example:</p>

        <pre><code>registration/?text=shostakovich</code></pre>


        <h3 id="event-type">Event type</h3>

        <p>You may use the query parameter <code>event_type</code>, comma separated,
        to get only registrations with event of specific types.

        <p>Example:</p>

        <pre><code>registration/?event_type=course</code></pre>


        <h3 id="getting-detailed-data">Getting detailed data</h3>

        <p>In the default case, event, keywords, locations, and other fields that
        refer to separate resources are only displayed as simple references.</p>

        <p>If you want to include the complete data from related resources in the
        current response, use the keyword <code>include</code>.</p>

        <p><strong> Please note, however, that including all the resources inlined
        in *every* event will result in a huge number of duplicate data in the json,
        making the json very slow to generate and process and causing considerable
        API load and long response times when too many such requests are made. Therefore,
        if you are listing the maximum number of events (100) or updating your cache
        with all events, please consider caching the keyword and location data separately
        to prevent unnecessary API slowdown and continuous repeated work. Keyword
        and location data seldom change and are easily fetched from their own endpoints
        separately.

        </strong></p>

        <p>Example:</p>

        <pre><code>registration/?include=event,keywords</code></pre>


        <h3 id="registration-admin-user">Admin organization''s registrations</h3>

        <p>You may use the query parameter <code>admin_user</code>, to get only registrations
        whose event has been published by an organization where the user is an admin
        (either an event admin, registration admin or a substitute user for an admin).

        <p>Example:</p>

        <pre><code>registration/?admin_user=true</code></pre>

        '
      summary: Return a list of registrations
      parameters:
      - in: query
        name: admin_user
        schema:
          type: string
        description: Search for registrations to which user has admin role (event
          admin, registration admin or substitute user).
      - in: query
        name: event_type
        schema:
          type: string
        description: Search for registrations with the given type. Multiple types
          are separated by comma.
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: query
        name: include
        schema:
          type: string
        description: Embed given reference-type fields, comma-separated if several,
          directly into the response, otherwise they are returned as URI references.
          The value <code>signups</code> can be used to include signups' data, and
          the value <code>event</code> can be used to include the event's data.
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 100 is the maximum value
          for page_size.
        schema:
          type: integer
      - in: query
        name: text
        schema:
          type: string
        description: Search (case insensitive) through all event's multilingual text
          fields (name, description, short_description, info_url) of a registration.
      tags:
      - registration
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegistrationList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedRegistrationList'
          description: ''
    post:
      operationId: registration_create
      summary: Create a new registration
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      tags:
      - registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Registration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Registration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Registration'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Registration'
          description: Registration has been successfully created.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
  /registration/{id}/:
    get:
      operationId: registration_retrieve
      summary: Return information for single registration
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - registration
      responses:
        '404':
          description: Registration was not found.
    put:
      operationId: registration_update
      description: Registration can be updated if the user has appropriate access
        permissions. The original implementation behaves like PATCH, ie. if some field
        is left out from the PUT call, its value is retained in database. In order
        to ensure consistent behaviour, users should always supply every field in
        PUT call.
      summary: Update a registration
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Registration'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/Registration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Registration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Registration'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Registration'
          description: Registration has been successfully updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Registration was not found.
    patch:
      operationId: registration_partial_update
      summary: Partially update a registration
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegistration'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/PatchedRegistration'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegistration'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegistration'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/Registration'
          description: Registration has been successfully partially updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Registration was not found.
    delete:
      operationId: registration_destroy
      description: Registration can be deleted if the user has appropriate access
        permissions.
      summary: Delete a registration
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - registration
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '204':
          description: Registration has been successfully deleted.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Registration was not found.
  /registration/{id}/send_message/:
    post:
      operationId: registration_send_message_create
      description: Email message to registration attendees can be send if the user
        has appropriate access permissions.
      summary: Send a message to attendees
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      tags:
      - registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MassEmail'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/MassEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MassEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MassEmail'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MassEmail'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/MassEmail'
          description: ''
  /registration/{id}/signups/export/{file_format}/:
    get:
      operationId: registration_signups_export_retrieve
      description: Registration attendees XLSX export can be made if the user has
        appropriate access permissions.
      summary: Export attendees as an XLSX file
      parameters:
      - in: path
        name: file_format
        schema:
          type: string
          pattern: ^xlsx$
        required: true
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration.
        required: true
      - in: query
        name: ui_language
        schema:
          type: string
        description: UI language locale. Can be either <code>fi</code>, <code>sv</code>
          or <code>en</code>. Defaults to <code>fi</code> if no value given.
      tags:
      - registration
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
              schema:
                type: string
                format: binary
          description: ''
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Registration not found.
  /registration_user_access/{id}/send_invitation/:
    post:
      operationId: registration_user_access_send_invitation_create
      summary: Send invitation to a single registration user
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this registration user access.
        required: true
      tags:
      - registration_user_access
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationUserAccess'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/RegistrationUserAccess'
          description: Invitation was successfully sent to the registration user.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Registration user was not found.
  /search/:
    get:
      operationId: search_list
      description: '<h2 id="using-search-endpoint">Using the search endpoint</h2>

        <p>This is the supposedly intelligent Elasticsearch Finnish full-text search
        for both events and places. The results are sorted by relevance score shown
        in the <code>score</code> field. The search parameter is <code>?q=</code>.


        <h4 id="specifying-resource-type">Specifying resource type</h4>

        <p>In the default case, both events and places are returned. The type of each
        resource is returned in the <code>resource_type</code> field. You may use
        the parameter <code>type</code> to ask for only <code>event</code> or <code>place</code>.


        <h4 id="events-with-decay-score">Future events with time decay</h4>

        <p>When searching for events only (<code>?type=event</code>), by default only
        future events are returned, with a decay function applied so that next events
        get a higher relevance score. This means that events in the near future are
        returned first:</p>

        <pre><code>search/?type=event&q=sibelius</code></pre>


        <h4 id="events-with-time-filtering">Events with time filtering</h4>

        <p>When searching for events only (<code>?type=event</code>), you may also
        search for events in the specified time range using <code>start</code> or
        <code>end</code> or both. In this case, relevance score is calculated only
        based on Finnish tokenization of the search string, with no time preference:</p>

        <pre><code>search/?type=event&q=sibelius&start=2017-01-01</code></pre>


        <h4 id="autocomplete">Autocomplete</h4>

        <p>For fast autocomplete substring match in the resource name, use the <code>?input=</code>
        parameter instead. When searching for events only (<code>?type=event</code>),
        by default only future events are returned, with a decay function applied
        so that next events get a higher relevance score. May be combined with <code>start</code>
        and <code>end</code>.

        <pre><code>search/?type=place&input=sibe</code></pre>

        '
      summary: Search through events and places
      parameters:
      - in: query
        name: end
        schema:
          type: string
          format: date-time
        description: Search for events beginning or ending before this time. Dates
          can be specified using ISO 8601 (for example, '2024-01-12') and additionally
          <code>today</code> and <code>now</code>.
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: query
        name: input
        schema:
          type: string
        description: Return autocompletition suggestions for this string. Mutually
          exclusive with <code>q</code> full-text search.
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 100 is the maximum value
          for page_size.
        schema:
          type: integer
      - in: query
        name: q
        schema:
          type: string
        description: Search for events and places matching this string. Mutually exclusive
          with <code>input</code> typeahead search.
      - in: query
        name: start
        schema:
          type: string
          format: date-time
        description: Search for events beginning or ending after this time. Dates
          can be specified using ISO 8601 (for example, '2024-01-12') and additionally
          <code>today</code> and <code>now</code>.
      - in: query
        name: type
        schema:
          type: string
        description: Comma-separated list of resource types to search for. Currently
          allowed values are <code>event</code> and <code>place</code>. <code>type=event</code>
          must be specified for event date filtering and relevancy sorting.
      tags:
      - search
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedEventList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedEventList'
          description: List of resources.
  /seats_reservation/:
    post:
      operationId: seats_reservation_create
      description: Seats reservation is required when signing to the registration.
      summary: Reserve seats for a registration
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      tags:
      - seats_reservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeatReservationCode'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/SeatReservationCode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SeatReservationCode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SeatReservationCode'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSignUps'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CreateSignUps'
          description: Seats has been successfully reserved.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '409':
          description: Not enough seats available.
  /seats_reservation/{id}/:
    put:
      operationId: seats_reservation_update
      description: Seats reservation can be updated if the valid code is added to
        the payload. The original implementation behaves like PATCH, ie. if some field
        is left out from the PUT call, its value is retained in database. In order
        to ensure consistent behaviour, users should always supply every field in
        PUT call.
      summary: Update a seats reservation
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this seat reservation code.
        required: true
      tags:
      - seats_reservation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SeatReservationCode'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/SeatReservationCode'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SeatReservationCode'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SeatReservationCode'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSignUps'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CreateSignUps'
          description: Seats reservation has been successfully updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '409':
          description: Not enough seats available.
  /signup/:
    get:
      operationId: signup_list
      description: '<h2 id="filtering-retrieved-signups">Filtering retrieved signups</h2>

        <p>Only admin users of the registration publisher organization can search
        signups.</p>

        <p>Query parameters can be used to filter the retrieved signups by the following
        criteria.</p>


        <h3 id="signup-registration">Registration</h3>

        <p>To find out signups of specific registration, use the query parameter <code>registration</code>.
        You may separate values by commas if you wish to query for several registrations.</p>

        <p>Example:</p>

        <pre><code>signup/?registration=1</code></pre>


        <h3 id="signup-text">Signup text</h3>

        <p>To find out signups that contain a specific string in name, email, membership_number
        or phone_number fields, use the query parameter <code>text</code>.</p>

        <p>Example:</p>

        <pre><code>signup/?text=shostakovich</code></pre>


        <h3 id="signup-attendee-status">Attendee status</h3>

        <p>You may use the query parameter <code>attendee_status</code>, comma separated,
        to get only signups with specific attendee status.

        <p>Example:</p>

        <pre><code>signup/?attendee_status=attending</code></pre>


        <h3 id="signup-ordering">Ordering</h3>

        <p>Default ordering is ascending alphabetical order primarily by <code>first_name</code>
        and secondarily by <code>last_name</code> which are also the only ordering
        parameters currently. Descending order is denoted by adding <code>-</code>
        in front of a parameter.</p>

        <p>Example:</p>

        <pre><code>signup/?sort=-first_name</code></pre>

        '
      summary: Return a list of signups
      parameters:
      - in: query
        name: attendee_status
        schema:
          type: array
          items:
            type: string
            x-spec-enum-id: 7c3e1c23851886f6
            enum:
            - attending
            - waitlisted
        description: |-
          Search for signups with the given attendee status. Multiple types are separated by comma.

          * `waitlisted` - Waitlisted
          * `attending` - Attending
        explode: true
        style: form
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 100 is the maximum value
          for page_size.
        schema:
          type: integer
      - in: query
        name: registration
        schema:
          type: string
        description: Search for signups with the given registration as specified by
          id. Multiple ids are separated by comma.
      - in: query
        name: sort
        schema:
          type: string
        description: Sort the returned signups in the given order. Possible sorting
          criteria are <code>first_name</code> and <code>last_name</code>. The default
          ordering is <code>first_name,last_name</code>.
      - in: query
        name: text
        schema:
          type: string
        description: Search (case insensitive) through the text fields of a signup
          (first_name, last_name) and the signup's contact person (email, membership_number
          and phone_number).
      tags:
      - signup
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSignUpList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedSignUpList'
          description: ''
    post:
      operationId: signup_create
      summary: Create new signups to a registration
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      tags:
      - signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSignUps'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/CreateSignUps'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateSignUps'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateSignUps'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSignUps'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/CreateSignUps'
          description: Signups have been successfully created.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
  /signup/{id}/:
    get:
      operationId: signup_retrieve
      summary: Return information for a single signup
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sign up.
        required: true
      tags:
      - signup
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUp'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/SignUp'
          description: Single signup object. Signup can be retrieved if the user has
            appropriate access permissions.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Signup was not found.
    put:
      operationId: signup_update
      description: Signup can be updated if the user has appropriate access permissions.
        The original implementation behaves like PATCH, ie. if some field is left
        out from the PUT call, its value is retained in database. In order to ensure
        consistent behaviour, users should always supply every field in PUT call.
      summary: Update a signup
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sign up.
        required: true
      tags:
      - signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUp'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/SignUp'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SignUp'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignUp'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUp'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/SignUp'
          description: Signup has been successfully updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Signup was not found.
    patch:
      operationId: signup_partial_update
      summary: Partially update a signup
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sign up.
        required: true
      tags:
      - signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSignUp'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/PatchedSignUp'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSignUp'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSignUp'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUp'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/SignUp'
          description: Signup has been successfully partially updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Signup was not found.
    delete:
      operationId: signup_destroy
      description: Signup can be deleted if the user has appropriate access permissions.
      summary: Delete a signup
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sign up.
        required: true
      tags:
      - signup
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '204':
          description: Signup has been successfully deleted.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Signup was not found.
  /signup/{id}/price_group/:
    delete:
      operationId: signup_price_group_destroy
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sign up.
        required: true
      tags:
      - signup
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '204':
          description: No response body
  /signup_group/:
    get:
      operationId: signup_group_list
      description: '<h2 id="filtering-retrieved-signup-groups">Filtering retrieved
        signup groups</h2>

        <p>Only admin users of the registration publisher organization can search
        signup groups.</p>

        <p>Query parameters can be used to filter the retrieved signup groups by the
        following criteria.</p>


        <h3 id="signup-group-registration">Registration</h3>

        <p>To find out signup groups of specific registration, use the query parameter
        <code>registration</code>. You may separate values by commas if you wish to
        query for several registrations.</p>

        <p>Example:</p>

        <pre><code>signup_group/?registration=1</code></pre>


        <h3 id="signup-group-text">Signup group text</h3>

        <p>To find out signup groups whose signups contain a specific string in name,
        email, membership_number or phone_number fields, use the query parameter <code>text</code>.</p>

        <p>Example:</p>

        <pre><code>signup_group/?text=shostakovich</code></pre>


        <h3 id="signup-group-attendee-status">Attendee status</h3>

        <p>You may use the query parameter <code>attendee_status</code>, comma separated,
        to get only signup groups with specific attendee status.

        <p>Example:</p>

        <pre><code>signup_group/?attendee_status=attending</code></pre>

        '
      summary: Return a list of signup groups
      parameters:
      - in: query
        name: attendee_status
        schema:
          type: array
          items:
            type: string
            x-spec-enum-id: 7c3e1c23851886f6
            enum:
            - attending
            - waitlisted
        description: |-
          Search for signup groups with the given attendee status. Multiple types are separated by comma.

          * `waitlisted` - Waitlisted
          * `attending` - Attending
        explode: true
        style: form
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 100 is the maximum value
          for page_size.
        schema:
          type: integer
      - in: query
        name: registration
        schema:
          type: string
        description: Search for signup groups with the given registration as specified
          by id. Multiple ids are separated by comma.
      - in: query
        name: sort
        schema:
          type: string
        description: Sort the returned signup groups in the given order. Possible
          sorting criteria are <code>first_name</code> and <code>last_name</code>.
          The default ordering is <code>first_name,last_name</code>.
      - in: query
        name: text
        schema:
          type: string
        description: Search (case insensitive) through the text fields of signups
          (first_name, last_name) and the contact person (email, membership_number
          and phone_number) in a signup group.
      tags:
      - signup_group
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSignUpGroupList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedSignUpGroupList'
          description: ''
    post:
      operationId: signup_group_create
      summary: Create new a signup group to the registration
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      tags:
      - signup_group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpGroupCreate'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/SignUpGroupCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SignUpGroupCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignUpGroupCreate'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpGroup'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/SignUpGroup'
          description: Signup group has been successfully created.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
  /signup_group/{id}/:
    get:
      operationId: signup_group_retrieve
      summary: Return information for a single signup group
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sign up group.
        required: true
      tags:
      - signup_group
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpGroup'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/SignUpGroup'
          description: Single signup group object. Signup group can be retrieved if
            the user has appropriate access permissions.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Signup group was not found.
    put:
      operationId: signup_group_update
      description: Signup group can be updated if the user has appropriate access
        permissions. The original implementation behaves like PATCH, ie. if some field
        is left out from the PUT call, its value is retained in database. In order
        to ensure consistent behaviour, users should always supply every field in
        PUT call.
      summary: Update a signup group
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sign up group.
        required: true
      tags:
      - signup_group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignUpGroup'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/SignUpGroup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SignUpGroup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SignUpGroup'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpGroup'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/SignUpGroup'
          description: Signup group has been successfully updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Signup group was not found.
    patch:
      operationId: signup_group_partial_update
      summary: Partially update a signup group
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sign up group.
        required: true
      tags:
      - signup_group
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSignUpGroup'
          application/ld+json:
            schema:
              $ref: '#/components/schemas/PatchedSignUpGroup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSignUpGroup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSignUpGroup'
        required: true
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignUpGroup'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/SignUpGroup'
          description: Signup group has been successfully partially updated.
        '400':
          description: Input format was not correct, eg. mandatory field was missing
            or JSON was malformed.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Signup group was not found.
    delete:
      operationId: signup_group_destroy
      description: Signup group can be deleted if the user has appropriate access
        permissions.
      summary: Delete a signup group
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this sign up group.
        required: true
      tags:
      - signup_group
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '204':
          description: Signup group has been successfully deleted.
        '401':
          description: User was not authenticated.
        '403':
          description: User does not have necessary permissions.
        '404':
          description: Signup group was not found.
  /user/:
    get:
      operationId: user_list
      summary: Return a list of users
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: page_size
        required: false
        in: query
        description: Number of results to return per page. 100 is the maximum value
          for page_size.
        schema:
          type: integer
      tags:
      - user
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
  /user/{id}/:
    get:
      operationId: user_retrieve
      summary: Retrieve information for a single user
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - json-ld
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - user
      security:
      - Apikey: []
      - Helsinki-tunnistus Keycloak: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/ld+json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
components:
  schemas:
    AdministrativeDivisionTranslation:
      type: object
      properties:
        name:
          type: string
          nullable: true
          maxLength: 100
    CreateSignUps:
      type: object
      properties:
        reservation_code:
          type: string
          description: Registration-specific reservation code value from the SeatsReservation
            object.
        registration:
          type: integer
          description: Id of the registration to which the user is going to signup.
        signups:
          type: array
          items:
            $ref: '#/components/schemas/SignUp'
          description: The list of persons to enrol to the registration.
      required:
      - registration
      - reservation_code
      - signups
      description: Payload which is to used to create signups to a registration.
    DataSource:
      type: object
      description: Source of the data, typically API provider specific identifier.
        Will also be used to specify standardized namespaces as they are brought into
        use.
      properties:
        id:
          type: string
          maxLength: 100
          description: Identifier of the data source.
        name:
          type: string
          maxLength: 255
          description: Name of the data source.
        user_editable_resources:
          type: boolean
          title: Resources may be edited by users
          description: Boolean to define if resources maybe be edited by users.
        user_editable_organizations:
          type: boolean
          title: Organizations may be edited by users
          description: Boolean to define if organizations may be edited by users.
        user_editable_registrations:
          type: boolean
          title: Owner organization's registrations may be edited by users
        user_editable_registration_price_groups:
          type: boolean
          title: Owner organization's registration price groups may be edited by users
        edit_past_events:
          type: boolean
          title: Past events may be edited using API
          description: Boolean to define if past events may be created using API.
        create_past_events:
          type: boolean
          title: Past events may be created using API
          description: Boolean to define if past events may be created using API.
        private:
          type: boolean
          title: Do not show events created by this data_source by default.
          description: Boolean to define is data source private. By default events
            of private data source are hidden.
        owner:
          type: string
          nullable: true
          description: Owner organization of the data source.
      required:
      - id
      - name
    Division:
      type: object
      description: Serializer that saves :class:`TranslatedFieldsField` automatically.
      properties:
        type:
          type: string
          description: Type name of the division (e.g. muni, school_district)
          readOnly: true
        ocd_id:
          type: string
          nullable: true
          description: Open Civic Data identifier
          maxLength: 200
        municipality:
          type: string
          readOnly: true
        translations:
          type: object
          properties:
            fi:
              $ref: '#/components/schemas/AdministrativeDivisionTranslation'
      required:
      - municipality
      - translations
      - type
    Event:
      type: object
      description: 'Describes the actual events. Linked events API supports organizing
        events into hierarchies. This is implemented with collection events called
        "super events". Super events are normal event objects, that reference contained
        events in "sub_events" property. Currently there are two major use cases:
        events such as "Helsinki Festival", which consist of unique events over a
        span of time and recurring events such as theatrical productions with multiple
        showings. It is implementation dependent how the grouping of events is done.
        It should be noted that grouping might be automatic based on eg. event name
        and thus group unrelated events together and miss related events. Users of
        data are advised to prepare for this.'
      properties:
        id:
          type: string
          description: Consists of source prefix and source specific identifier. These
            should be URIs uniquely identifying the event, and preferably also well
            formed http-URLs pointing to more information about the event.
        location:
          allOf:
          - $ref: '#/components/schemas/PlaceJSONLDRelatedField'
          nullable: true
        keywords:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/KeywordsJSONLDRelatedField'
          description: The keywords that describe the topic and type of this event.
        registration:
          allOf:
          - $ref: '#/components/schemas/RegistrationJSONLDRelatedField'
          nullable: true
        super_event:
          allOf:
          - $ref: '#/components/schemas/EventJSONLDRelatedField'
          nullable: true
          description: References the aggregate event containing this event.
        event_status:
          type: string
          description: As defined in schema.org/Event. Postponed events do not have
            a date set, rescheduled events have been moved to different date.
        type_id:
          type: string
          description: Event type. Current options are General (Event), Course and
            Volunteering.
        publication_status:
          type: string
          description: Specifies whether the event should be published in the API
            (<code>public</code>) or not (<code>draft</code>).
        external_links:
          type: array
          items:
            $ref: '#/components/schemas/EventLink'
        offers:
          type: array
          items:
            $ref: '#/components/schemas/Offer'
        data_source:
          type: string
          description: Unique identifier (URI)for the system from which this event
            came from, preferably URL with more information about the system and its
            policies.
        publisher:
          type: string
          nullable: true
          description: Id of the organization that published this event in Linked
            events.
        sub_events:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/EventsJSONLDRelatedField'
          description: For aggregate events this contains references to all sub events.
            Usually this means that the sub events are part of series. The field <code>super_event_type</code>
            tells the type of the aggregate event.
        images:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/ImagesJSONLDRelatedField'
            nullable: true
        videos:
          type: array
          items:
            $ref: '#/components/schemas/Video'
        in_language:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/LanguagesJSONLDRelatedField'
          description: The languages spoken or supported at the event.
        audience:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/KeywordsJSONLDRelatedField'
          description: The audience groups (picked from keywords) this event is intended
            for.
        created_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the event was created.
        last_modified_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the event was last modified.
        date_published:
          type: string
          format: date-time
          nullable: true
          description: Date this event is free to be published.
        start_time:
          type: string
          format: date-time
          nullable: true
          description: Time the event will start.
        end_time:
          type: string
          format: date-time
          nullable: true
          description: Time the event will end.
        created_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that created this event (user endpoint).
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that last modified this event (user
            endpoint).
        custom_data:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
          description: Key value field for custom data
        origin_id:
          type: string
          nullable: true
          maxLength: 100
        user_name:
          type: string
          nullable: true
          maxLength: 50
          description: Name of the external user.
        user_email:
          type: string
          format: email
          nullable: true
          title: User e-mail
          maxLength: 254
          description: Email of the external user.
        user_phone_number:
          type: string
          nullable: true
          maxLength: 18
          description: Phone number of the external user.
        user_organization:
          type: string
          nullable: true
          description: Organization of the external user.
          maxLength: 255
        user_consent:
          type: boolean
          description: Consent to user information of the external user.
        environmental_certificate:
          type: string
          nullable: true
          maxLength: 255
          description: Url of the environmental certificate.
        environment:
          enum:
          - out
          - in
          - ''
          - null
          type: string
          x-spec-enum-id: fdd79c80ea2b5617
          nullable: true
          title: Event environment
          description: Environment of the event. Current options are in (Indoor) and
            out (Outdoor).
        has_start_time:
          type: boolean
        has_end_time:
          type: boolean
        audience_min_age:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: Minimum recommended age
          description: Minimum age of attendees.
        audience_max_age:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: Maximum recommended age
          description: Maximum age of attendees.
        super_event_type:
          enum:
          - recurring
          - umbrella
          - ''
          - null
          type: string
          description: If the event has sub_events, describes the type of the event.
            Current options are <code>null</code>, <code>recurring</code>, which means
            a repeating event, and <code>umbrella</code>, which means a major event
            that has sub-events.
          x-spec-enum-id: 0f1c2ffe46ac2001
          nullable: true
        deleted:
          type: boolean
          description: Whether this event has been deleted in the original data source.
        maximum_attendee_capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          description: Maximum number of people allowed to enrol to the event. Can
            also be an estimate of the maximum number of attendees.
        minimum_attendee_capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          description: Minimum number of people required to enrol to the event.
        enrolment_start_time:
          type: string
          format: date-time
          nullable: true
          description: Time when enrolment for the event will start.
        enrolment_end_time:
          type: string
          format: date-time
          nullable: true
          description: Time when enrolment for the event will end.
        local:
          type: boolean
        replaced_by:
          type: string
          nullable: true
        name:
          type: object
          properties:
            fi:
              type: string
              maxLength: 255
            sv:
              type: string
              maxLength: 255
            en:
              type: string
              maxLength: 255
            zh_hans:
              type: string
              maxLength: 255
            ru:
              type: string
              maxLength: 255
            ar:
              type: string
              maxLength: 255
          description: Short descriptive name for the event, recommended limit 80
            characters.
        short_description:
          type: object
          properties:
            fi:
              type: string
            sv:
              type: string
            en:
              type: string
            zh_hans:
              type: string
            ru:
              type: string
            ar:
              type: string
          description: Short description for the event, recommended limit 140 characters.
        description:
          type: object
          properties:
            fi:
              type: string
            sv:
              type: string
            en:
              type: string
            zh_hans:
              type: string
            ru:
              type: string
            ar:
              type: string
          description: Long description for the event, several chapters
        location_extra_info:
          type: object
          properties:
            fi:
              type: string
              maxLength: 400
            sv:
              type: string
              maxLength: 400
            en:
              type: string
              maxLength: 400
            zh_hans:
              type: string
              maxLength: 400
            ru:
              type: string
              maxLength: 400
            ar:
              type: string
              maxLength: 400
          description: Unstructured extra info about location (like "eastern door
            of railway station").
        provider:
          type: object
          properties:
            fi:
              type: string
              maxLength: 512
            sv:
              type: string
              maxLength: 512
            en:
              type: string
              maxLength: 512
            zh_hans:
              type: string
              maxLength: 512
            ru:
              type: string
              maxLength: 512
            ar:
              type: string
              maxLength: 512
          description: Description of who is responsible for the practical implementation
            of the event.
        provider_contact_info:
          type: object
          properties:
            fi:
              type: string
              maxLength: 10000
            sv:
              type: string
              maxLength: 10000
            en:
              type: string
              maxLength: 10000
            zh_hans:
              type: string
              maxLength: 10000
            ru:
              type: string
              maxLength: 10000
            ar:
              type: string
              maxLength: 10000
          description: Provider's contact information, multilingual.
        info_url:
          type: object
          properties:
            fi:
              type: string
              format: uri
              maxLength: 1000
            sv:
              type: string
              format: uri
              maxLength: 1000
            en:
              type: string
              format: uri
              maxLength: 1000
            zh_hans:
              type: string
              format: uri
              maxLength: 1000
            ru:
              type: string
              format: uri
              maxLength: 1000
            ar:
              type: string
              format: uri
              maxLength: 1000
          description: Link (URL) to a page with more information about event.
      required:
      - created_by
      - last_modified_by
      - keywords
      - publication_status
      - start_time
      - name
      - location
    EventJSONLDRelatedField:
      type: object
      properties:
        '@id':
          type: string
          format: uri
          default: https://api.url/v1/event/example:example/
    EventLink:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
          description: Name describing contents of the link.
        link:
          type: string
          format: uri
          maxLength: 200
          description: Link to an external related entity.
        language:
          type: string
          description: Language of the content behind the link.
      required:
      - language
      - link
      description: Links to entities that the event publisher considers related to
        this event. Eg. links to catering service available during theatrical production.
        The links will most likely point to unstructured content, ie. web pages suitable
        for human viewing.
    EventsJSONLDRelatedField:
      type: object
      properties:
        '@id':
          type: string
          format: uri
          default: https://api.url/v1/event/example:example/
    GroupSignUp:
      type: object
      properties:
        id:
          type: integer
        anonymization_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        first_name:
          type: string
          nullable: true
          maxLength: 50
        last_name:
          type: string
          nullable: true
          maxLength: 50
        date_of_birth:
          type: string
          format: date
          nullable: true
        phone_number:
          type: string
          nullable: true
          maxLength: 18
        city:
          type: string
          nullable: true
          maxLength: 50
        attendee_status:
          enum:
          - waitlisted
          - attending
          type: string
          description: |-
            * `waitlisted` - Waitlisted
            * `attending` - Attending
          x-spec-enum-id: 7c3e1c23851886f6
        street_address:
          type: string
          nullable: true
          maxLength: 500
        zipcode:
          type: string
          nullable: true
          title: ZIP code
          maxLength: 10
        presence_status:
          enum:
          - not_present
          - present
          type: string
          description: |-
            * `not_present` - Not present
            * `present` - Present
          x-spec-enum-id: 56820ccd00519380
        registration:
          type: integer
        signup_group:
          type: integer
          readOnly: true
          nullable: true
        user_consent:
          type: boolean
        extra_info:
          type: string
        has_contact_person_access:
          type: boolean
          readOnly: true
        is_created_by_current_user:
          type: boolean
          readOnly: true
        created_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created_by:
          type: string
          readOnly: true
          nullable: true
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
        price_group:
          allOf:
          - $ref: '#/components/schemas/SignUpPriceGroup'
          nullable: true
        payment:
          allOf:
          - $ref: '#/components/schemas/SignUpPayment'
          readOnly: true
        payment_refund:
          allOf:
          - $ref: '#/components/schemas/SignUpPaymentRefund'
          readOnly: true
        payment_cancellation:
          allOf:
          - $ref: '#/components/schemas/SignUpPaymentCancellation'
          readOnly: true
      required:
      - anonymization_time
      - created_by
      - created_time
      - has_contact_person_access
      - is_created_by_current_user
      - last_modified_by
      - last_modified_time
      - payment
      - payment_cancellation
      - payment_refund
      - signup_group
    GroupSignUpCreate:
      type: object
      properties:
        id:
          type: integer
        anonymization_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        first_name:
          type: string
          nullable: true
          maxLength: 50
        last_name:
          type: string
          nullable: true
          maxLength: 50
        date_of_birth:
          type: string
          format: date
          nullable: true
        phone_number:
          type: string
          nullable: true
          maxLength: 18
        city:
          type: string
          nullable: true
          maxLength: 50
        attendee_status:
          enum:
          - waitlisted
          - attending
          type: string
          description: |-
            * `waitlisted` - Waitlisted
            * `attending` - Attending
          x-spec-enum-id: 7c3e1c23851886f6
        street_address:
          type: string
          nullable: true
          maxLength: 500
        zipcode:
          type: string
          nullable: true
          title: ZIP code
          maxLength: 10
        presence_status:
          enum:
          - not_present
          - present
          type: string
          description: |-
            * `not_present` - Not present
            * `present` - Present
          x-spec-enum-id: 56820ccd00519380
        registration:
          type: integer
        signup_group:
          type: integer
          readOnly: true
          nullable: true
        user_consent:
          type: boolean
        extra_info:
          type: string
        has_contact_person_access:
          type: boolean
          readOnly: true
        is_created_by_current_user:
          type: boolean
          readOnly: true
        created_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created_by:
          type: string
          readOnly: true
          nullable: true
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
        price_group:
          allOf:
          - $ref: '#/components/schemas/SignUpPriceGroup'
          nullable: true
        payment_refund:
          allOf:
          - $ref: '#/components/schemas/SignUpPaymentRefund'
          readOnly: true
        payment_cancellation:
          allOf:
          - $ref: '#/components/schemas/SignUpPaymentCancellation'
          readOnly: true
      required:
      - anonymization_time
      - created_by
      - created_time
      - has_contact_person_access
      - is_created_by_current_user
      - last_modified_by
      - last_modified_time
      - payment_cancellation
      - payment_refund
      - signup_group
    Image:
      type: object
      description: Images are used as pictures for events, places and organizers.
      properties:
        id:
          type: integer
          readOnly: true
          description: Identifier of the image.
        license:
          type: string
          description: License data for the image. May be "cc_by" (default) or "event_only".
            The latter license restricts use of the image and is specified on the
            API front page.
        created_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the image was created.
        last_modified_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the image was last modified.
        created_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that created this image (user endpoint).
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that last modified this image (user
            endpoint).
        name:
          type: string
          maxLength: 255
          description: Image description.
        image:
          type: string
          format: uri
          nullable: true
        url:
          type: string
          format: uri
          nullable: true
          title: Image
          maxLength: 400
          description: The image file URL.
        cropping:
          type: string
          maxLength: 255
          description: Cropping data for the image.
        photographer_name:
          type: string
          nullable: true
          maxLength: 255
          description: Name of the photographer.
        alt_text:
          type: object
          properties:
            fi:
              type: string
              maxLength: 320
            sv:
              type: string
              maxLength: 320
            en:
              type: string
              maxLength: 320
            zh_hans:
              type: string
              maxLength: 320
            ru:
              type: string
              maxLength: 320
            ar:
              type: string
              maxLength: 320
          description: The image alt text, multilingual.
        data_source:
          type: string
          nullable: true
          description: Identifies the source for data, this is specific to API provider.
            This is useful for API users, as any data quality issues are likely to
            be specific to data source and workarounds can be applied as such.
        publisher:
          type: string
          nullable: true
          description: The organization responsible for the image.
      required:
      - created_by
      - id
      - last_modified_by
      - url
    ImageCreate:
      type: object
      properties:
        image:
          type: string
          format: uri
      required:
      - image
    ImagesJSONLDRelatedField:
      type: object
      properties:
        '@id':
          type: string
          format: uri
          default: https://api.url/v1/image/example:example/
    Keyword:
      type: object
      description: Keywords are used to describe events. Linked events uses namespaced
        keywords in order to support having events from different sources. Namespaces
        are needed because keywords are defined by the organization sourcing the events
        and can therefore overlap in meaning. Conversely the meaning of same keyword
        can vary between organizations. Organization sourcing the keyword can be identified
        by data_source field. Data_source field will later specify standardized namespaces
        as well.
      properties:
        id:
          type: string
          description: Consists of source prefix and source specific identifier. These
            should be URIs uniquely identifying the keyword, and preferably also well
            formed http-URLs pointing to more information about the keyword.
        alt_labels:
          type: array
          items:
            type: string
          readOnly: true
          description: Alternative labels for this keyword, no language specified.
        created_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the keyword was created
        last_modified_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the keyword was last modified
        origin_id:
          type: string
          nullable: true
          maxLength: 100
          description: Identifier for the keyword in the organization using this keyword.
            For standardized namespaces this will be a shared identifier.
        aggregate:
          type: boolean
          description: This keyword is an combination of several keywords at source.
        deprecated:
          type: boolean
          description: Whether this keyword has been deprecated in the original data
            source. It may still contain old events linked to it.
        has_upcoming_events:
          type: boolean
          description: Tells if this keyword entry has any upcoming events.
        n_events:
          type: integer
          readOnly: true
          title: Event count
          description: Amount of events using this keyword entry as a keyword or an
            audience.
        image:
          type: integer
          nullable: true
          description: Id of the this keyword entry's image.
        data_source:
          type: string
          description: Source of the keyword, typically API provider specific identifier.
            Will also be used to specify standardized namespaces as they are brought
            into use.
        created_by:
          type: integer
          nullable: true
          description: URL reference to the user that created this keyword (user endpoint).
        last_modified_by:
          type: integer
          nullable: true
          description: URL reference to the user that last modified this keyword (user
            endpoint).
        publisher:
          type: string
          nullable: true
          description: Id of the organization that has originally published this keyword.
        replaced_by:
          type: string
          nullable: true
        name:
          type: object
          properties:
            fi:
              type: string
              maxLength: 255
            sv:
              type: string
              maxLength: 255
            en:
              type: string
              maxLength: 255
            zh_hans:
              type: string
              maxLength: 255
            ru:
              type: string
              maxLength: 255
            ar:
              type: string
              maxLength: 255
          description: Keyword name, multilingual.
      required:
      - data_source
      - n_events
      - name
    KeywordSet:
      type: object
      description: Keyword sets are used to group keywords together into classification
        groups. For example, one set of keywords might describe themes used by an
        event provider and another could be used to describe audience groups.
      properties:
        id:
          type: string
          maxLength: 100
          description: Unique identifier for this keyword set. These should be URIs
            identifying the source and the keyword set itself, and preferably also
            well formed http-URLs pointing to more information about the keyword.
        keywords:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/KeywordsJSONLDRelatedField'
        usage:
          type: string
          description: Usage type for this keyword set. These allow UIs to show the
            set in appropriate place.
        created_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the keyword set was created.
        last_modified_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the keyword set was last modified.
        origin_id:
          type: string
          nullable: true
          maxLength: 100
          description: Identifier for the keyword set in the originating system, if
            any.
        image:
          type: integer
          nullable: true
          description: Id of the this keyword set entry's image.
        data_source:
          type: string
          description: Unique identifier (URI)for the system where this keyword set
            originated, if any.
        created_by:
          type: integer
          nullable: true
          description: URL reference to the user that created this keyword set (user
            endpoint).
        last_modified_by:
          type: integer
          nullable: true
          description: URL reference to the user that last modified this keyword set
            (user endpoint).
        organization:
          type: string
          nullable: true
          title: Organization which uses this set
          description: Organization that has defined this keyword set.
        name:
          type: object
          properties:
            fi:
              type: string
              maxLength: 255
            sv:
              type: string
              maxLength: 255
            en:
              type: string
              maxLength: 255
            zh_hans:
              type: string
              maxLength: 255
            ru:
              type: string
              maxLength: 255
            ar:
              type: string
              maxLength: 255
          description: Name for this keyword set, multilingual. This should be human
            readable, such that it could be shown as label in UI.
      required:
      - data_source
      - id
      - usage
      - name
      - keywords
    KeywordsJSONLDRelatedField:
      type: object
      properties:
        '@id':
          type: string
          format: uri
          default: https://api.url/v1/keyword/example:example/
    Language:
      type: object
      description: Primary purpose of the language endpoint is to allow users to identify
        which languages are supported for multilingual fields. It also has translations
        for the names of the languages.
      properties:
        id:
          type: string
          maxLength: 10
          description: Identifier for the language (typically ISO639-1).
        translation_available:
          type: boolean
          readOnly: true
          description: Event data may have translations in the languages which have
            <code>translation_available</code> set to <code>true</code>.
        service_language:
          type: boolean
          title: Can be used as registration service language
        name:
          type: object
          properties:
            fi:
              type: string
              maxLength: 20
            sv:
              type: string
              maxLength: 20
            en:
              type: string
              maxLength: 20
            zh_hans:
              type: string
              maxLength: 20
            ru:
              type: string
              maxLength: 20
            ar:
              type: string
              maxLength: 20
          description: Translation for the language name. Properties shown here are
            examples, it is suggested that every language supported has its name translated
            to every other language. Users of the API cannot rely on any translations
            being present.
      required:
      - id
      - translation_available
      - name
      - service_language
    LanguagesJSONLDRelatedField:
      type: object
      properties:
        '@id':
          type: string
          format: uri
          default: https://api.url/v1/language/fi/
    MassEmail:
      type: object
      properties:
        subject:
          type: string
          description: Subject of the email.
        body:
          type: string
          description: Body of the email.
          example: <p>Email message body</p>
        signup_groups:
          type: array
          items:
            type: integer
          description: Ids of attendees whose contact persons will receive the email
            message.
          example:
          - 1
        signups:
          type: array
          items:
            type: integer
          description: Ids of signup groups whose contact persons will receive the
            email message.
          example:
          - 1
      required:
      - body
      - subject
      description: Payload of the send message request.
    Meta:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
            next:
              type: string
              nullable: true
              format: uri
            previous:
              type: string
              nullable: true
              format: uri
      description: Meta record for result pagination. All results from API are paginated,
        ie. delivered in chunks of X results. This records describes how many results
        there are in total, and how to access previous and next pages.
    Offer:
      type: object
      properties:
        is_free:
          type: boolean
          description: Whether the event has an admission fee or not.
        offer_price_groups:
          type: array
          items:
            $ref: '#/components/schemas/OfferPriceGroup'
          description: Customer group selections with concrete pricing for this offer.
            Used as initial values for registration customer groups when creating
            a registration for the event that this offer belongs to. When at least
            one customer group selection exists, the registration is considered to
            require a payment.
        price:
          type: object
          properties:
            fi:
              type: string
              maxLength: 1000
            sv:
              type: string
              maxLength: 1000
            en:
              type: string
              maxLength: 1000
            zh_hans:
              type: string
              maxLength: 1000
            ru:
              type: string
              maxLength: 1000
            ar:
              type: string
              maxLength: 1000
          description: Public price information of the event. These are not bare numbers
            but instead descriptions of the pricing scheme.
        info_url:
          type: object
          properties:
            fi:
              type: string
              format: url
              maxLength: 1000
            sv:
              type: string
              format: url
              maxLength: 1000
            en:
              type: string
              format: url
              maxLength: 1000
            zh_hans:
              type: string
              format: url
              maxLength: 1000
            ru:
              type: string
              format: url
              maxLength: 1000
            ar:
              type: string
              format: url
              maxLength: 1000
          description: Link (URL) to a page with more information about offer.
        description:
          type: object
          properties:
            fi:
              type: string
            sv:
              type: string
            en:
              type: string
            zh_hans:
              type: string
            ru:
              type: string
            ar:
              type: string
          description: Further description of the pricing.
      description: Price information record for an event. The prices are not in a
        structured format and the format depends on information source. An exception
        to this is the case of free event. These are indicated using is_free flag,
        which is searchable.
      required:
      - price
    OfferPriceGroup:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for this offer customer group.
        price_group:
          type: integer
          description: The organization-level customer group whose instance this offer
            customer group is. Gives the name / label for the offer customer group
            and determines if the customer group is free. Price will be forced to
            0 if the customer group is free.
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
          description: Price of this customer group including VAT.
        vat_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,2})?$
          description: VAT percentage of this customer group. Possible values are
            <code>25.50</code>, <code>14.00</code>, <code>10.00</code>, <code>0.00</code>.
        price_without_vat:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
          readOnly: true
          description: Price of this customer group excluding VAT. Calculated automatically
            based on <code>price</code> and <code>vat_percentage</code>.
        vat:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
          readOnly: true
          description: Amount of VAT. Calculated automatically based on <code>price</code>
            and </code>price_without_vat</code>.
      required:
      - price_group
      - price_without_vat
      - vat
      description: Customer group selection with concrete pricing for an event's price
        offer. Used as initial values for registration customer groups when creating
        a registration for the event that the offer belongs to.
    OrganizationClass:
      type: object
      description: Organization classes are used for organization classification.
      properties:
        id:
          type: string
          readOnly: true
          description: Consists of source prefix and source specific identifier.
        origin_id:
          type: string
          maxLength: 255
        created_time:
          type: string
          format: date-time
          description: Time when the organization class was created.
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          description: Time when the organization class was last modified.
        name:
          type: string
          maxLength: 255
          description: The name of the organization class.
        data_source:
          type: string
          nullable: true
          description: Source of the organization data, typically API provider specific
            identifier. Will also be used to specify standardized namespaces as they
            are brought into use.
      required:
      - id
      - last_modified_time
      - name
      - created_time
    OrganizationDetail:
      type: object
      description: |-
        Serializer with the support for JSON-LD/Schema.org.
        JSON-LD/Schema.org syntax::
          {
             "@context": "http://schema.org",
             "@type": "Event",
             "name": "Event name",
             ...
          }
        See full example at: http://schema.org/Event
        Args:
          hide_ld_context (bool):
            Hides `@context` from JSON, can be used in nested
            serializers
      properties:
        id:
          type: string
          readOnly: true
        data_source:
          type: string
          nullable: true
        origin_id:
          type: string
          maxLength: 255
        classification:
          type: string
          nullable: true
          description: An organization category, e.g. committee
        name:
          type: string
          description: A primary name, e.g. a legally recognized name
          maxLength: 255
        founding_date:
          type: string
          format: date
          nullable: true
          description: A date of founding
        dissolution_date:
          type: string
          format: date
          nullable: true
          description: A date of dissolution
        parent_organization:
          type: string
          format: uri
        sub_organizations:
          type: array
          items:
            type: string
            format: uri
          readOnly: true
        affiliated_organizations:
          type: array
          items:
            type: string
            format: uri
          readOnly: true
        created_time:
          type: string
          format: date-time
          nullable: true
        last_modified_time:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        last_modified_by:
          type: integer
          readOnly: true
          nullable: true
        is_affiliated:
          type: boolean
          readOnly: true
        replaced_by:
          type: string
          format: uri
          readOnly: true
        has_regular_users:
          type: boolean
          readOnly: true
        regular_users:
          type: array
          items:
            type: string
            description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
              only.
        financial_admin_users:
          type: array
          items:
            type: string
            description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
              only.
        registration_admin_users:
          type: array
          items:
            type: string
            description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
              only.
        admin_users:
          type: array
          items:
            type: string
            description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
              only.
        web_store_merchants:
          type: array
          items:
            $ref: '#/components/schemas/WebStoreMerchant'
          nullable: true
        web_store_accounts:
          type: array
          items:
            $ref: '#/components/schemas/WebStoreAccount'
          nullable: true
      required:
      - affiliated_organizations
      - created_by
      - data_source
      - has_regular_users
      - id
      - is_affiliated
      - last_modified_by
      - name
      - origin_id
      - replaced_by
      - sub_organizations
    OrganizationList:
      type: object
      description: |-
        Serializer with the support for JSON-LD/Schema.org.
        JSON-LD/Schema.org syntax::
          {
             "@context": "http://schema.org",
             "@type": "Event",
             "name": "Event name",
             ...
          }
        See full example at: http://schema.org/Event
        Args:
          hide_ld_context (bool):
            Hides `@context` from JSON, can be used in nested
            serializers
      properties:
        id:
          type: string
          readOnly: true
        data_source:
          type: string
          nullable: true
        origin_id:
          type: string
          maxLength: 255
        classification:
          type: string
          nullable: true
          description: An organization category, e.g. committee
        name:
          type: string
          description: A primary name, e.g. a legally recognized name
          maxLength: 255
        founding_date:
          type: string
          format: date
          nullable: true
          description: A date of founding
        dissolution_date:
          type: string
          format: date
          nullable: true
          description: A date of dissolution
        parent_organization:
          type: string
          format: uri
        sub_organizations:
          type: array
          items:
            type: string
            format: uri
          readOnly: true
        affiliated_organizations:
          type: array
          items:
            type: string
            format: uri
          readOnly: true
        created_time:
          type: string
          format: date-time
          nullable: true
        last_modified_time:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        last_modified_by:
          type: integer
          readOnly: true
          nullable: true
        replaced_by:
          type: string
          format: uri
          readOnly: true
        has_regular_users:
          type: boolean
          readOnly: true
        is_affiliated:
          type: boolean
          readOnly: true
      required:
      - created_by
      - data_source
      - has_regular_users
      - id
      - is_affiliated
      - last_modified_by
      - name
    PaginatedDataSourceList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/DataSource'
    PaginatedEventList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    PaginatedImageList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    PaginatedKeywordList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/Keyword'
    PaginatedKeywordSetList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/KeywordSet'
    PaginatedLanguageList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/Language'
    PaginatedOrganizationClassList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationClass'
    PaginatedOrganizationListList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationList'
    PaginatedPlaceList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/Place'
    PaginatedPriceGroupList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/PriceGroup'
    PaginatedRegistrationList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/Registration'
    PaginatedSignUpGroupList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/SignUpGroup'
    PaginatedSignUpList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/SignUp'
    PaginatedUserList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PaginatedWebStoreAccountList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/WebStoreAccount'
    PaginatedWebStoreMerchantList:
      type: object
      properties:
        meta:
          type: object
          properties:
            count:
              type: integer
              example: 0
            next:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint/?page=4
            previous:
              type: string
              nullable: true
              format: uri
              example: https://api.url/v1/example-endpoint?page=2
        data:
          type: array
          items:
            $ref: '#/components/schemas/WebStoreMerchant'
    PatchedEvent:
      type: object
      description: 'Describes the actual events. Linked events API supports organizing
        events into hierarchies. This is implemented with collection events called
        "super events". Super events are normal event objects, that reference contained
        events in "sub_events" property. Currently there are two major use cases:
        events such as "Helsinki Festival", which consist of unique events over a
        span of time and recurring events such as theatrical productions with multiple
        showings. It is implementation dependent how the grouping of events is done.
        It should be noted that grouping might be automatic based on eg. event name
        and thus group unrelated events together and miss related events. Users of
        data are advised to prepare for this.'
      properties:
        id:
          type: string
          description: Consists of source prefix and source specific identifier. These
            should be URIs uniquely identifying the event, and preferably also well
            formed http-URLs pointing to more information about the event.
        location:
          allOf:
          - $ref: '#/components/schemas/PlaceJSONLDRelatedField'
          nullable: true
        keywords:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/KeywordsJSONLDRelatedField'
          description: The keywords that describe the topic and type of this event.
        registration:
          allOf:
          - $ref: '#/components/schemas/RegistrationJSONLDRelatedField'
          nullable: true
        super_event:
          allOf:
          - $ref: '#/components/schemas/EventJSONLDRelatedField'
          nullable: true
          description: References the aggregate event containing this event.
        event_status:
          type: string
          description: As defined in schema.org/Event. Postponed events do not have
            a date set, rescheduled events have been moved to different date.
        type_id:
          type: string
          description: Event type. Current options are General (Event), Course and
            Volunteering.
        publication_status:
          type: string
          description: Specifies whether the event should be published in the API
            (<code>public</code>) or not (<code>draft</code>).
        external_links:
          type: array
          items:
            $ref: '#/components/schemas/EventLink'
        offers:
          type: array
          items:
            $ref: '#/components/schemas/Offer'
        data_source:
          type: string
          description: Unique identifier (URI)for the system from which this event
            came from, preferably URL with more information about the system and its
            policies.
        publisher:
          type: string
          nullable: true
          description: Id of the organization that published this event in Linked
            events.
        sub_events:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/EventsJSONLDRelatedField'
          description: For aggregate events this contains references to all sub events.
            Usually this means that the sub events are part of series. The field <code>super_event_type</code>
            tells the type of the aggregate event.
        images:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/ImagesJSONLDRelatedField'
            nullable: true
        videos:
          type: array
          items:
            $ref: '#/components/schemas/Video'
        in_language:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/LanguagesJSONLDRelatedField'
          description: The languages spoken or supported at the event.
        audience:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/KeywordsJSONLDRelatedField'
          description: The audience groups (picked from keywords) this event is intended
            for.
        created_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the event was created.
        last_modified_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the event was last modified.
        date_published:
          type: string
          format: date-time
          nullable: true
          description: Date this event is free to be published.
        start_time:
          type: string
          format: date-time
          nullable: true
          description: Time the event will start.
        end_time:
          type: string
          format: date-time
          nullable: true
          description: Time the event will end.
        created_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that created this event (user endpoint).
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that last modified this event (user
            endpoint).
        custom_data:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
          description: Key value field for custom data
        origin_id:
          type: string
          nullable: true
          maxLength: 100
        user_name:
          type: string
          nullable: true
          maxLength: 50
          description: Name of the external user.
        user_email:
          type: string
          format: email
          nullable: true
          title: User e-mail
          maxLength: 254
          description: Email of the external user.
        user_phone_number:
          type: string
          nullable: true
          maxLength: 18
          description: Phone number of the external user.
        user_organization:
          type: string
          nullable: true
          description: Organization of the external user.
          maxLength: 255
        user_consent:
          type: boolean
          description: Consent to user information of the external user.
        environmental_certificate:
          type: string
          nullable: true
          maxLength: 255
          description: Url of the environmental certificate.
        environment:
          enum:
          - out
          - in
          - ''
          - null
          type: string
          x-spec-enum-id: fdd79c80ea2b5617
          nullable: true
          title: Event environment
          description: Environment of the event. Current options are in (Indoor) and
            out (Outdoor).
        has_start_time:
          type: boolean
        has_end_time:
          type: boolean
        audience_min_age:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: Minimum recommended age
          description: Minimum age of attendees.
        audience_max_age:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: Maximum recommended age
          description: Maximum age of attendees.
        super_event_type:
          enum:
          - recurring
          - umbrella
          - ''
          - null
          type: string
          description: If the event has sub_events, describes the type of the event.
            Current options are <code>null</code>, <code>recurring</code>, which means
            a repeating event, and <code>umbrella</code>, which means a major event
            that has sub-events.
          x-spec-enum-id: 0f1c2ffe46ac2001
          nullable: true
        deleted:
          type: boolean
          description: Whether this event has been deleted in the original data source.
        maximum_attendee_capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          description: Maximum number of people allowed to enrol to the event. Can
            also be an estimate of the maximum number of attendees.
        minimum_attendee_capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          description: Minimum number of people required to enrol to the event.
        enrolment_start_time:
          type: string
          format: date-time
          nullable: true
          description: Time when enrolment for the event will start.
        enrolment_end_time:
          type: string
          format: date-time
          nullable: true
          description: Time when enrolment for the event will end.
        local:
          type: boolean
        replaced_by:
          type: string
          nullable: true
        name:
          type: object
          properties:
            fi:
              type: string
              maxLength: 255
            sv:
              type: string
              maxLength: 255
            en:
              type: string
              maxLength: 255
            zh_hans:
              type: string
              maxLength: 255
            ru:
              type: string
              maxLength: 255
            ar:
              type: string
              maxLength: 255
          description: Short descriptive name for the event, recommended limit 80
            characters.
        short_description:
          type: object
          properties:
            fi:
              type: string
            sv:
              type: string
            en:
              type: string
            zh_hans:
              type: string
            ru:
              type: string
            ar:
              type: string
          description: Short description for the event, recommended limit 140 characters.
        description:
          type: object
          properties:
            fi:
              type: string
            sv:
              type: string
            en:
              type: string
            zh_hans:
              type: string
            ru:
              type: string
            ar:
              type: string
          description: Long description for the event, several chapters
        location_extra_info:
          type: object
          properties:
            fi:
              type: string
              maxLength: 400
            sv:
              type: string
              maxLength: 400
            en:
              type: string
              maxLength: 400
            zh_hans:
              type: string
              maxLength: 400
            ru:
              type: string
              maxLength: 400
            ar:
              type: string
              maxLength: 400
          description: Unstructured extra info about location (like "eastern door
            of railway station").
        provider:
          type: object
          properties:
            fi:
              type: string
              maxLength: 512
            sv:
              type: string
              maxLength: 512
            en:
              type: string
              maxLength: 512
            zh_hans:
              type: string
              maxLength: 512
            ru:
              type: string
              maxLength: 512
            ar:
              type: string
              maxLength: 512
          description: Description of who is responsible for the practical implementation
            of the event.
        provider_contact_info:
          type: object
          properties:
            fi:
              type: string
              maxLength: 10000
            sv:
              type: string
              maxLength: 10000
            en:
              type: string
              maxLength: 10000
            zh_hans:
              type: string
              maxLength: 10000
            ru:
              type: string
              maxLength: 10000
            ar:
              type: string
              maxLength: 10000
          description: Provider's contact information, multilingual.
        info_url:
          type: object
          properties:
            fi:
              type: string
              format: uri
              maxLength: 1000
            sv:
              type: string
              format: uri
              maxLength: 1000
            en:
              type: string
              format: uri
              maxLength: 1000
            zh_hans:
              type: string
              format: uri
              maxLength: 1000
            ru:
              type: string
              format: uri
              maxLength: 1000
            ar:
              type: string
              format: uri
              maxLength: 1000
          description: Link (URL) to a page with more information about event.
      required:
      - created_by
      - last_modified_by
      - keywords
      - publication_status
      - start_time
      - name
      - location
    PatchedImage:
      type: object
      description: Images are used as pictures for events, places and organizers.
      properties:
        id:
          type: integer
          readOnly: true
          description: Identifier of the image.
        license:
          type: string
          description: License data for the image. May be "cc_by" (default) or "event_only".
            The latter license restricts use of the image and is specified on the
            API front page.
        created_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the image was created.
        last_modified_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the image was last modified.
        created_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that created this image (user endpoint).
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that last modified this image (user
            endpoint).
        name:
          type: string
          maxLength: 255
          description: Image description.
        image:
          type: string
          format: uri
          nullable: true
        url:
          type: string
          format: uri
          nullable: true
          title: Image
          maxLength: 400
          description: The image file URL.
        cropping:
          type: string
          maxLength: 255
          description: Cropping data for the image.
        photographer_name:
          type: string
          nullable: true
          maxLength: 255
          description: Name of the photographer.
        alt_text:
          type: object
          properties:
            fi:
              type: string
              maxLength: 320
            sv:
              type: string
              maxLength: 320
            en:
              type: string
              maxLength: 320
            zh_hans:
              type: string
              maxLength: 320
            ru:
              type: string
              maxLength: 320
            ar:
              type: string
              maxLength: 320
          description: The image alt text, multilingual.
        data_source:
          type: string
          nullable: true
          description: Identifies the source for data, this is specific to API provider.
            This is useful for API users, as any data quality issues are likely to
            be specific to data source and workarounds can be applied as such.
        publisher:
          type: string
          nullable: true
          description: The organization responsible for the image.
      required:
      - created_by
      - id
      - last_modified_by
      - url
    PatchedKeyword:
      type: object
      description: Keywords are used to describe events. Linked events uses namespaced
        keywords in order to support having events from different sources. Namespaces
        are needed because keywords are defined by the organization sourcing the events
        and can therefore overlap in meaning. Conversely the meaning of same keyword
        can vary between organizations. Organization sourcing the keyword can be identified
        by data_source field. Data_source field will later specify standardized namespaces
        as well.
      properties:
        id:
          type: string
          description: Consists of source prefix and source specific identifier. These
            should be URIs uniquely identifying the keyword, and preferably also well
            formed http-URLs pointing to more information about the keyword.
        alt_labels:
          type: array
          items:
            type: string
          readOnly: true
          description: Alternative labels for this keyword, no language specified.
        created_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the keyword was created
        last_modified_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the keyword was last modified
        origin_id:
          type: string
          nullable: true
          maxLength: 100
          description: Identifier for the keyword in the organization using this keyword.
            For standardized namespaces this will be a shared identifier.
        aggregate:
          type: boolean
          description: This keyword is an combination of several keywords at source.
        deprecated:
          type: boolean
          description: Whether this keyword has been deprecated in the original data
            source. It may still contain old events linked to it.
        has_upcoming_events:
          type: boolean
          description: Tells if this keyword entry has any upcoming events.
        n_events:
          type: integer
          readOnly: true
          title: Event count
          description: Amount of events using this keyword entry as a keyword or an
            audience.
        image:
          type: integer
          nullable: true
          description: Id of the this keyword entry's image.
        data_source:
          type: string
          description: Source of the keyword, typically API provider specific identifier.
            Will also be used to specify standardized namespaces as they are brought
            into use.
        created_by:
          type: integer
          nullable: true
          description: URL reference to the user that created this keyword (user endpoint).
        last_modified_by:
          type: integer
          nullable: true
          description: URL reference to the user that last modified this keyword (user
            endpoint).
        publisher:
          type: string
          nullable: true
          description: Id of the organization that has originally published this keyword.
        replaced_by:
          type: string
          nullable: true
        name:
          type: object
          properties:
            fi:
              type: string
              maxLength: 255
            sv:
              type: string
              maxLength: 255
            en:
              type: string
              maxLength: 255
            zh_hans:
              type: string
              maxLength: 255
            ru:
              type: string
              maxLength: 255
            ar:
              type: string
              maxLength: 255
          description: Keyword name, multilingual.
      required:
      - data_source
      - n_events
      - name
    PatchedKeywordSet:
      type: object
      description: Keyword sets are used to group keywords together into classification
        groups. For example, one set of keywords might describe themes used by an
        event provider and another could be used to describe audience groups.
      properties:
        id:
          type: string
          maxLength: 100
          description: Unique identifier for this keyword set. These should be URIs
            identifying the source and the keyword set itself, and preferably also
            well formed http-URLs pointing to more information about the keyword.
        keywords:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/KeywordsJSONLDRelatedField'
        usage:
          type: string
          description: Usage type for this keyword set. These allow UIs to show the
            set in appropriate place.
        created_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the keyword set was created.
        last_modified_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the keyword set was last modified.
        origin_id:
          type: string
          nullable: true
          maxLength: 100
          description: Identifier for the keyword set in the originating system, if
            any.
        image:
          type: integer
          nullable: true
          description: Id of the this keyword set entry's image.
        data_source:
          type: string
          description: Unique identifier (URI)for the system where this keyword set
            originated, if any.
        created_by:
          type: integer
          nullable: true
          description: URL reference to the user that created this keyword set (user
            endpoint).
        last_modified_by:
          type: integer
          nullable: true
          description: URL reference to the user that last modified this keyword set
            (user endpoint).
        organization:
          type: string
          nullable: true
          title: Organization which uses this set
          description: Organization that has defined this keyword set.
        name:
          type: object
          properties:
            fi:
              type: string
              maxLength: 255
            sv:
              type: string
              maxLength: 255
            en:
              type: string
              maxLength: 255
            zh_hans:
              type: string
              maxLength: 255
            ru:
              type: string
              maxLength: 255
            ar:
              type: string
              maxLength: 255
          description: Name for this keyword set, multilingual. This should be human
            readable, such that it could be shown as label in UI.
      required:
      - data_source
      - id
      - usage
      - name
      - keywords
    PatchedOrganizationDetail:
      type: object
      description: |-
        Serializer with the support for JSON-LD/Schema.org.
        JSON-LD/Schema.org syntax::
          {
             "@context": "http://schema.org",
             "@type": "Event",
             "name": "Event name",
             ...
          }
        See full example at: http://schema.org/Event
        Args:
          hide_ld_context (bool):
            Hides `@context` from JSON, can be used in nested
            serializers
      properties:
        id:
          type: string
          readOnly: true
        data_source:
          type: string
          nullable: true
        origin_id:
          type: string
          maxLength: 255
        classification:
          type: string
          nullable: true
          description: An organization category, e.g. committee
        name:
          type: string
          description: A primary name, e.g. a legally recognized name
          maxLength: 255
        founding_date:
          type: string
          format: date
          nullable: true
          description: A date of founding
        dissolution_date:
          type: string
          format: date
          nullable: true
          description: A date of dissolution
        parent_organization:
          type: string
          format: uri
        sub_organizations:
          type: array
          items:
            type: string
            format: uri
          readOnly: true
        affiliated_organizations:
          type: array
          items:
            type: string
            format: uri
          readOnly: true
        created_time:
          type: string
          format: date-time
          nullable: true
        last_modified_time:
          type: string
          format: date-time
          nullable: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        last_modified_by:
          type: integer
          readOnly: true
          nullable: true
        is_affiliated:
          type: boolean
          readOnly: true
        replaced_by:
          type: string
          format: uri
          readOnly: true
        has_regular_users:
          type: boolean
          readOnly: true
        regular_users:
          type: array
          items:
            type: string
            description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
              only.
        financial_admin_users:
          type: array
          items:
            type: string
            description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
              only.
        registration_admin_users:
          type: array
          items:
            type: string
            description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
              only.
        admin_users:
          type: array
          items:
            type: string
            description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
              only.
        web_store_merchants:
          type: array
          items:
            $ref: '#/components/schemas/WebStoreMerchant'
          nullable: true
        web_store_accounts:
          type: array
          items:
            $ref: '#/components/schemas/WebStoreAccount'
          nullable: true
      required:
      - affiliated_organizations
      - created_by
      - data_source
      - has_regular_users
      - id
      - is_affiliated
      - last_modified_by
      - name
      - origin_id
      - replaced_by
      - sub_organizations
    PatchedPlace:
      type: object
      description: Places describe physical locations for events and means for contacting
        people responsible for these locations. Place definitions come from organizations
        publishing events (field "publisher") and can thus have slightly different
        semantics between places sourced from different organizations.
      properties:
        id:
          type: string
          description: Consists of source prefix and source specific identifier. These
            should be URIs uniquely identifying the place, and preferably also well
            formed http-URLs pointing to more information about the place.
        origin_id:
          type: string
          description: Place identifier in the originating system. Same as id but
            without the data source prefix.
        data_source:
          type: string
          nullable: true
        publisher:
          type: string
          nullable: true
          description: Organization that provided the location data
        divisions:
          type: array
          items:
            $ref: '#/components/schemas/Division'
          readOnly: true
        created_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the place was created
        last_modified_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the place was last modified
        custom_data:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
          description: Key value field for custom data
        email:
          type: string
          format: email
          nullable: true
          title: E-mail
          maxLength: 254
          description: Contact email for the place, note that this is not multilingual.
        contact_type:
          type: string
          nullable: true
          maxLength: 255
        address_region:
          type: string
          nullable: true
          maxLength: 255
          description: Larger region for address (like states), not typically used
            in Finland.
        postal_code:
          type: string
          nullable: true
          maxLength: 128
          description: Postal code of the location (as used by traditional mail).
        post_office_box_num:
          type: string
          nullable: true
          title: PO BOX
          maxLength: 128
          description: PO box for traditional mail, in case mail is not delivered
            to the building.
        address_country:
          type: string
          nullable: true
          title: Country
          maxLength: 2
          description: Country for the place, not multilingual.
        deleted:
          type: boolean
          description: This place entry is not used anymore, but old events still
            reference it. This might be because of duplicate removal.
        has_upcoming_events:
          type: boolean
          description: Tells if this place entry has any upcoming events.
        n_events:
          type: integer
          readOnly: true
          title: Event count
          description: Amount of events using this place entry as location.
        image:
          type: integer
          nullable: true
          description: Id of the this place entry's image.
        created_by:
          type: integer
          nullable: true
          description: URL reference to the user that created this place (user endpoint).
        last_modified_by:
          type: integer
          nullable: true
          description: URL reference to the user that last modified this place (user
            endpoint).
        parent:
          type: string
          nullable: true
        replaced_by:
          type: string
          nullable: true
        position:
          type: object
          properties:
            coordinates:
              type: array
              items:
                type: number
              description: Coordinates in format specified by type property
            type:
              type: string
              enum:
              - Point
              description: Interpretation of the coordinates property. Only point
                is supported in this version
          description: Geographic position of the place specified using subset of
            GeoJSON
        name:
          type: object
          properties:
            fi:
              type: string
              maxLength: 255
            sv:
              type: string
              maxLength: 255
            en:
              type: string
              maxLength: 255
            zh_hans:
              type: string
              maxLength: 255
            ru:
              type: string
              maxLength: 255
            ar:
              type: string
              maxLength: 255
          description: Name of the place, multilingual
        street_address:
          type: object
          properties:
            fi:
              type: string
              maxLength: 255
            sv:
              type: string
              maxLength: 255
            en:
              type: string
              maxLength: 255
            zh_hans:
              type: string
              maxLength: 255
            ru:
              type: string
              maxLength: 255
            ar:
              type: string
              maxLength: 255
          description: Street address for the place, multilingual
        info_url:
          type: object
          properties:
            fi:
              type: string
              format: url
              maxLength: 1000
            sv:
              type: string
              format: url
              maxLength: 1000
            en:
              type: string
              format: url
              maxLength: 1000
            zh_hans:
              type: string
              format: url
              maxLength: 1000
            ru:
              type: string
              format: url
              maxLength: 1000
            ar:
              type: string
              format: url
              maxLength: 1000
          description: Link (URL) to a page with more information about place
        description:
          type: object
          properties:
            fi:
              type: string
            sv:
              type: string
            en:
              type: string
            zh_hans:
              type: string
            ru:
              type: string
            ar:
              type: string
          description: Short description of the place, multilingual.
        address_locality:
          type: object
          properties:
            fi:
              type: string
              maxLength: 255
            sv:
              type: string
              maxLength: 255
            en:
              type: string
              maxLength: 255
            zh_hans:
              type: string
              maxLength: 255
            ru:
              type: string
              maxLength: 255
            ar:
              type: string
              maxLength: 255
          description: Describes where the address is located, typically this would
            be name of the city.
        telephone:
          type: object
          properties:
            fi:
              type: string
              maxLength: 128
            sv:
              type: string
              maxLength: 128
            en:
              type: string
              maxLength: 128
            zh_hans:
              type: string
              maxLength: 128
            ru:
              type: string
              maxLength: 128
            ar:
              type: string
              maxLength: 128
          description: Contact phone number for the place, multilingual
      required:
      - n_events
      - origin_id
      - name
      - data_source
    PatchedPriceGroup:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: Unique identifier for this customer group.
        publisher:
          type: string
          description: Unique identifier of the organization to which this customer
            group belongs to. Default customer group will have a <code>null</code>
            value here.
        is_free:
          type: boolean
          description: Determines if the customer group is free of charge or if it
            should have a price once it is used in registration customer group selections.
        created_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this customer group was created.
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this customer group was last modified.
        created_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that created this customer group
            (user endpoint).
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that last modified this customer
            group (user endpoint).
        description:
          type: object
          properties:
            fi:
              type: string
              maxLength: 255
            sv:
              type: string
              maxLength: 255
            en:
              type: string
              maxLength: 255
            zh_hans:
              type: string
              maxLength: 255
            ru:
              type: string
              maxLength: 255
            ar:
              type: string
              maxLength: 255
          description: Name or short description of the customer group.
      required:
      - created_by
      - created_time
      - id
      - last_modified_by
      - last_modified_time
      - publisher
      - description
      description: Customer group selection for an organization. Used for creating
        customer groups with prices for events and registrations. Default customer
        groups are available to all organizations.
    PatchedRegistration:
      type: object
      description: Registrations are used for event registrations. They allow users
        to sign up to events.
      properties:
        id:
          type: integer
          readOnly: true
          description: Unique identifier for this registration.
        signups:
          type: array
          items:
            $ref: '#/components/schemas/SignUp'
          readOnly: true
          description: The list of attendees in the registration. Only admin users
            of the publisher organization are allowed to see this information.
        current_attendee_count:
          type: integer
          readOnly: true
          description: The number of attendees registered for the event.
        current_waiting_list_count:
          type: integer
          readOnly: true
          description: The number of attendees on the waiting list for the event.
        remaining_attendee_capacity:
          type: integer
          nullable: true
          readOnly: true
          description: The number of seats remaining in the event. Returns <code>null</code>
            if attendee capacity is not limited.
        remaining_waiting_list_capacity:
          type: integer
          nullable: true
          readOnly: true
          description: The number of seats remaining in the waiting list. Returns
            <code>null</code> if waiting list capacity is not limited.
        data_source:
          type: string
          readOnly: true
          description: Identifies the source for data, this is specific to API provider.
            This value is inherited from the event of the registration.
        publisher:
          type: string
          readOnly: true
          description: Id for the organization that published this registration. This
            value is inherited from the event of the registration.
        registration_user_accesses:
          type: array
          items:
            $ref: '#/components/schemas/RegistrationUserAccessCreate'
          description: Registration user accesses are used to define registration
            specific permissions.
        has_registration_user_access:
          type: boolean
          readOnly: true
        has_substitute_user_access:
          type: boolean
          readOnly: true
        event:
          $ref: '#/components/schemas/EventJSONLDRelatedField'
        attendee_registration:
          type: boolean
        audience_min_age:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: Minimum recommended age
          description: Minimum age of attendees.
        audience_max_age:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: Maximum recommended age
          description: Maximum age of attendees.
        enrolment_start_time:
          type: string
          format: date-time
          nullable: true
          title: Enrollment start time
          description: Time when enrolment for the event starts.
        enrolment_end_time:
          type: string
          format: date-time
          nullable: true
          title: Enrollment end time
          description: Time when enrolment for the event ends.
        maximum_attendee_capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Maximum number of attendees allowed for the event. Can also
            be an estimate of the maximum number of attendees.
        minimum_attendee_capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          description: Minimum number of attendees required for the event to take
            place.
        waiting_list_capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          description: Maximum number of people allowed to register to the waiting
            list.
        maximum_group_size:
          type: integer
          maximum: 32767
          minimum: 1
          nullable: true
          description: Maximum number of attendees allowed in a single group.
        mandatory_fields:
          type: array
          items:
            enum:
            - city
            - first_name
            - last_name
            - phone_number
            - street_address
            - zipcode
            - ''
            type: string
            description: |-
              * `city` - City
              * `first_name` - First name
              * `last_name` - Last name
              * `phone_number` - Phone number
              * `street_address` - Street address
              * `zipcode` - ZIP code
            x-spec-enum-id: ff1810175b2da5c5
          description: Mandatory fields in the enrolment form.
        signup_url:
          type: object
          properties:
            en:
              type: string
            fi:
              type: string
            sv:
              type: string
          readOnly: true
        is_created_by_current_user:
          type: boolean
          readOnly: true
        created_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this registration was created.
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this registration was last modified.
        created_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that created this registration (user
            endpoint).
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that last modified this registration
            (user endpoint).
        registration_price_groups:
          type: array
          items:
            $ref: '#/components/schemas/RegistrationPriceGroup'
          description: Customer group selections that should be available when signing
            up to this registration. When at least one customer group selection exists,
            the registration is considered to require a payment.
        registration_merchant:
          $ref: '#/components/schemas/RegistrationWebStoreMerchant'
        registration_account:
          $ref: '#/components/schemas/RegistrationWebStoreAccount'
        confirmation_message:
          type: object
          properties:
            fi:
              type: string
            sv:
              type: string
            en:
              type: string
            zh_hans:
              type: string
            ru:
              type: string
            ar:
              type: string
        instructions:
          type: object
          properties:
            fi:
              type: string
            sv:
              type: string
            en:
              type: string
            zh_hans:
              type: string
            ru:
              type: string
            ar:
              type: string
      required:
      - created_by
      - created_time
      - current_attendee_count
      - current_waiting_list_count
      - data_source
      - event
      - has_registration_user_access
      - has_substitute_user_access
      - id
      - is_created_by_current_user
      - last_modified_by
      - last_modified_time
      - maximum_attendee_capacity
      - publisher
    PatchedSignUp:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for this attendee.
        anonymization_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        first_name:
          type: string
          nullable: true
          maxLength: 50
          description: Attendee's first name
        last_name:
          type: string
          nullable: true
          maxLength: 50
          description: Attendee's last name.
        date_of_birth:
          type: string
          format: date
          nullable: true
          description: Attendee's date of birth.
        phone_number:
          type: string
          nullable: true
          maxLength: 18
        city:
          type: string
          nullable: true
          maxLength: 50
          description: Attendee's city.
        attendee_status:
          enum:
          - waitlisted
          - attending
          type: string
          description: Status of the attendee. Options are "attending" and "waitlisted".
          x-spec-enum-id: 7c3e1c23851886f6
        street_address:
          type: string
          nullable: true
          maxLength: 500
          description: Attendee's street address.
        zipcode:
          type: string
          nullable: true
          title: ZIP code
          maxLength: 10
          description: Attendee's postal code.
        presence_status:
          enum:
          - not_present
          - present
          type: string
          description: Event presence status of the attendee. Options are "present"
            and "not_present".
          x-spec-enum-id: 56820ccd00519380
        registration:
          type: integer
          description: Id of the registration to which this signup is related.
        signup_group:
          type: integer
          nullable: true
        user_consent:
          type: boolean
        contact_person:
          allOf:
          - $ref: '#/components/schemas/SignUpContactPerson'
          nullable: true
        extra_info:
          type: string
          description: Extra information about the attendee.
        has_contact_person_access:
          type: boolean
          readOnly: true
        is_created_by_current_user:
          type: boolean
          readOnly: true
        created_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this signup was created.
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this signup was last modified.
        created_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that created this signup (user endpoint).
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that last modified this signup (user
            endpoint).
        price_group:
          allOf:
          - $ref: '#/components/schemas/SignUpPriceGroup'
          nullable: true
        create_payment:
          type: boolean
          writeOnly: true
        payment:
          allOf:
          - $ref: '#/components/schemas/SignUpPayment'
          readOnly: true
        payment_refund:
          allOf:
          - $ref: '#/components/schemas/SignUpPaymentRefund'
          readOnly: true
        payment_cancellation:
          allOf:
          - $ref: '#/components/schemas/SignUpPaymentCancellation'
          readOnly: true
      required:
      - created_by
      - created_time
      - has_contact_person_access
      - is_created_by_current_user
      - last_modified_by
      - last_modified_time
      - registration
      description: Signups are used as attendees for registrations. An attendee can
        have their own contact person information if they are not part of a group.
    PatchedSignUpGroup:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: Unique identifier for this signup group.
        registration:
          type: integer
          description: Id of the registration to which this signup group is related.
        signups:
          type: array
          items:
            $ref: '#/components/schemas/GroupSignUp'
          description: The list of attendees belonging to this signup group.
        anonymization_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when the signup group was anonymized.
        contact_person:
          allOf:
          - $ref: '#/components/schemas/SignUpContactPerson'
          nullable: true
        extra_info:
          type: string
          description: Extra information about the group.
        has_contact_person_access:
          type: boolean
          readOnly: true
        is_created_by_current_user:
          type: boolean
          readOnly: true
        created_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this signup group was created.
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this signup group was last modified.
        created_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that created this signup group (user
            endpoint).
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that last modified this signup group
            (user endpoint).
        payment:
          allOf:
          - $ref: '#/components/schemas/SignUpPayment'
          readOnly: true
        payment_refund:
          allOf:
          - $ref: '#/components/schemas/SignUpPaymentRefund'
          readOnly: true
        payment_cancellation:
          allOf:
          - $ref: '#/components/schemas/SignUpPaymentCancellation'
          readOnly: true
      required:
      - created_by
      - created_time
      - has_contact_person_access
      - id
      - is_created_by_current_user
      - last_modified_by
      - last_modified_time
      - registration
      description: Signup groups are used as attendee groups for registrations.
    Place:
      type: object
      description: Places describe physical locations for events and means for contacting
        people responsible for these locations. Place definitions come from organizations
        publishing events (field "publisher") and can thus have slightly different
        semantics between places sourced from different organizations.
      properties:
        id:
          type: string
          description: Consists of source prefix and source specific identifier. These
            should be URIs uniquely identifying the place, and preferably also well
            formed http-URLs pointing to more information about the place.
        origin_id:
          type: string
          description: Place identifier in the originating system. Same as id but
            without the data source prefix.
        data_source:
          type: string
          nullable: true
        publisher:
          type: string
          nullable: true
          description: Organization that provided the location data
        divisions:
          type: array
          items:
            $ref: '#/components/schemas/Division'
          readOnly: true
        created_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the place was created
        last_modified_time:
          type: string
          format: date-time
          nullable: true
          description: Time when the place was last modified
        custom_data:
          type: array
          items:
            type: object
            properties:
              key:
                type: string
              value:
                type: string
          description: Key value field for custom data
        email:
          type: string
          format: email
          nullable: true
          title: E-mail
          maxLength: 254
          description: Contact email for the place, note that this is not multilingual.
        contact_type:
          type: string
          nullable: true
          maxLength: 255
        address_region:
          type: string
          nullable: true
          maxLength: 255
          description: Larger region for address (like states), not typically used
            in Finland.
        postal_code:
          type: string
          nullable: true
          maxLength: 128
          description: Postal code of the location (as used by traditional mail).
        post_office_box_num:
          type: string
          nullable: true
          title: PO BOX
          maxLength: 128
          description: PO box for traditional mail, in case mail is not delivered
            to the building.
        address_country:
          type: string
          nullable: true
          title: Country
          maxLength: 2
          description: Country for the place, not multilingual.
        deleted:
          type: boolean
          description: This place entry is not used anymore, but old events still
            reference it. This might be because of duplicate removal.
        has_upcoming_events:
          type: boolean
          description: Tells if this place entry has any upcoming events.
        n_events:
          type: integer
          readOnly: true
          title: Event count
          description: Amount of events using this place entry as location.
        image:
          type: integer
          nullable: true
          description: Id of the this place entry's image.
        created_by:
          type: integer
          nullable: true
          description: URL reference to the user that created this place (user endpoint).
        last_modified_by:
          type: integer
          nullable: true
          description: URL reference to the user that last modified this place (user
            endpoint).
        parent:
          type: string
          nullable: true
        replaced_by:
          type: string
          nullable: true
        position:
          type: object
          properties:
            coordinates:
              type: array
              items:
                type: number
              description: Coordinates in format specified by type property
            type:
              type: string
              enum:
              - Point
              description: Interpretation of the coordinates property. Only point
                is supported in this version
          description: Geographic position of the place specified using subset of
            GeoJSON
        name:
          type: object
          properties:
            fi:
              type: string
              maxLength: 255
            sv:
              type: string
              maxLength: 255
            en:
              type: string
              maxLength: 255
            zh_hans:
              type: string
              maxLength: 255
            ru:
              type: string
              maxLength: 255
            ar:
              type: string
              maxLength: 255
          description: Name of the place, multilingual
        street_address:
          type: object
          properties:
            fi:
              type: string
              maxLength: 255
            sv:
              type: string
              maxLength: 255
            en:
              type: string
              maxLength: 255
            zh_hans:
              type: string
              maxLength: 255
            ru:
              type: string
              maxLength: 255
            ar:
              type: string
              maxLength: 255
          description: Street address for the place, multilingual
        info_url:
          type: object
          properties:
            fi:
              type: string
              format: url
              maxLength: 1000
            sv:
              type: string
              format: url
              maxLength: 1000
            en:
              type: string
              format: url
              maxLength: 1000
            zh_hans:
              type: string
              format: url
              maxLength: 1000
            ru:
              type: string
              format: url
              maxLength: 1000
            ar:
              type: string
              format: url
              maxLength: 1000
          description: Link (URL) to a page with more information about place
        description:
          type: object
          properties:
            fi:
              type: string
            sv:
              type: string
            en:
              type: string
            zh_hans:
              type: string
            ru:
              type: string
            ar:
              type: string
          description: Short description of the place, multilingual.
        address_locality:
          type: object
          properties:
            fi:
              type: string
              maxLength: 255
            sv:
              type: string
              maxLength: 255
            en:
              type: string
              maxLength: 255
            zh_hans:
              type: string
              maxLength: 255
            ru:
              type: string
              maxLength: 255
            ar:
              type: string
              maxLength: 255
          description: Describes where the address is located, typically this would
            be name of the city.
        telephone:
          type: object
          properties:
            fi:
              type: string
              maxLength: 128
            sv:
              type: string
              maxLength: 128
            en:
              type: string
              maxLength: 128
            zh_hans:
              type: string
              maxLength: 128
            ru:
              type: string
              maxLength: 128
            ar:
              type: string
              maxLength: 128
          description: Contact phone number for the place, multilingual
      required:
      - n_events
      - origin_id
      - name
      - data_source
    PlaceJSONLDRelatedField:
      type: object
      properties:
        '@id':
          type: string
          format: uri
          default: https://api.url/v1/place/example:example/
    PriceGroup:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: Unique identifier for this customer group.
        publisher:
          type: string
          description: Unique identifier of the organization to which this customer
            group belongs to. Default customer group will have a <code>null</code>
            value here.
        is_free:
          type: boolean
          description: Determines if the customer group is free of charge or if it
            should have a price once it is used in registration customer group selections.
        created_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this customer group was created.
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this customer group was last modified.
        created_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that created this customer group
            (user endpoint).
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that last modified this customer
            group (user endpoint).
        description:
          type: object
          properties:
            fi:
              type: string
              maxLength: 255
            sv:
              type: string
              maxLength: 255
            en:
              type: string
              maxLength: 255
            zh_hans:
              type: string
              maxLength: 255
            ru:
              type: string
              maxLength: 255
            ar:
              type: string
              maxLength: 255
          description: Name or short description of the customer group.
      required:
      - created_by
      - created_time
      - id
      - last_modified_by
      - last_modified_time
      - publisher
      - description
      description: Customer group selection for an organization. Used for creating
        customer groups with prices for events and registrations. Default customer
        groups are available to all organizations.
    Registration:
      type: object
      description: Registrations are used for event registrations. They allow users
        to sign up to events.
      properties:
        id:
          type: integer
          readOnly: true
          description: Unique identifier for this registration.
        signups:
          type: array
          items:
            $ref: '#/components/schemas/SignUp'
          readOnly: true
          description: The list of attendees in the registration. Only admin users
            of the publisher organization are allowed to see this information.
        current_attendee_count:
          type: integer
          readOnly: true
          description: The number of attendees registered for the event.
        current_waiting_list_count:
          type: integer
          readOnly: true
          description: The number of attendees on the waiting list for the event.
        remaining_attendee_capacity:
          type: integer
          nullable: true
          readOnly: true
          description: The number of seats remaining in the event. Returns <code>null</code>
            if attendee capacity is not limited.
        remaining_waiting_list_capacity:
          type: integer
          nullable: true
          readOnly: true
          description: The number of seats remaining in the waiting list. Returns
            <code>null</code> if waiting list capacity is not limited.
        data_source:
          type: string
          readOnly: true
          description: Identifies the source for data, this is specific to API provider.
            This value is inherited from the event of the registration.
        publisher:
          type: string
          readOnly: true
          description: Id for the organization that published this registration. This
            value is inherited from the event of the registration.
        registration_user_accesses:
          type: array
          items:
            $ref: '#/components/schemas/RegistrationUserAccessCreate'
          description: Registration user accesses are used to define registration
            specific permissions.
        has_registration_user_access:
          type: boolean
          readOnly: true
        has_substitute_user_access:
          type: boolean
          readOnly: true
        event:
          $ref: '#/components/schemas/EventJSONLDRelatedField'
        attendee_registration:
          type: boolean
        audience_min_age:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: Minimum recommended age
          description: Minimum age of attendees.
        audience_max_age:
          type: integer
          maximum: 32767
          minimum: 0
          nullable: true
          title: Maximum recommended age
          description: Maximum age of attendees.
        enrolment_start_time:
          type: string
          format: date-time
          nullable: true
          title: Enrollment start time
          description: Time when enrolment for the event starts.
        enrolment_end_time:
          type: string
          format: date-time
          nullable: true
          title: Enrollment end time
          description: Time when enrolment for the event ends.
        maximum_attendee_capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
          description: Maximum number of attendees allowed for the event. Can also
            be an estimate of the maximum number of attendees.
        minimum_attendee_capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          description: Minimum number of attendees required for the event to take
            place.
        waiting_list_capacity:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          description: Maximum number of people allowed to register to the waiting
            list.
        maximum_group_size:
          type: integer
          maximum: 32767
          minimum: 1
          nullable: true
          description: Maximum number of attendees allowed in a single group.
        mandatory_fields:
          type: array
          items:
            enum:
            - city
            - first_name
            - last_name
            - phone_number
            - street_address
            - zipcode
            - ''
            type: string
            description: |-
              * `city` - City
              * `first_name` - First name
              * `last_name` - Last name
              * `phone_number` - Phone number
              * `street_address` - Street address
              * `zipcode` - ZIP code
            x-spec-enum-id: ff1810175b2da5c5
          description: Mandatory fields in the enrolment form.
        signup_url:
          type: object
          properties:
            en:
              type: string
            fi:
              type: string
            sv:
              type: string
          readOnly: true
        is_created_by_current_user:
          type: boolean
          readOnly: true
        created_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this registration was created.
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this registration was last modified.
        created_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that created this registration (user
            endpoint).
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that last modified this registration
            (user endpoint).
        registration_price_groups:
          type: array
          items:
            $ref: '#/components/schemas/RegistrationPriceGroup'
          description: Customer group selections that should be available when signing
            up to this registration. When at least one customer group selection exists,
            the registration is considered to require a payment.
        registration_merchant:
          $ref: '#/components/schemas/RegistrationWebStoreMerchant'
        registration_account:
          $ref: '#/components/schemas/RegistrationWebStoreAccount'
        confirmation_message:
          type: object
          properties:
            fi:
              type: string
            sv:
              type: string
            en:
              type: string
            zh_hans:
              type: string
            ru:
              type: string
            ar:
              type: string
        instructions:
          type: object
          properties:
            fi:
              type: string
            sv:
              type: string
            en:
              type: string
            zh_hans:
              type: string
            ru:
              type: string
            ar:
              type: string
      required:
      - created_by
      - created_time
      - current_attendee_count
      - current_waiting_list_count
      - data_source
      - event
      - has_registration_user_access
      - has_substitute_user_access
      - id
      - is_created_by_current_user
      - last_modified_by
      - last_modified_time
      - maximum_attendee_capacity
      - publisher
    RegistrationJSONLDRelatedField:
      type: object
      properties:
        '@id':
          type: string
          format: uri
          default: https://api.url/v1/registration/1/
    RegistrationPriceGroup:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for this registration customer group.
        price_group:
          type: integer
          description: The organization-level customer group whose instance this registration
            customer group is. Gives the name / label for the registration customer
            group and determines if the customer group is free. Price will be forced
            to 0 if the customer group is free.
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
          description: Price of this customer group including VAT.
        vat_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,2})?$
          description: VAT percentage of this customer group. Possible values are
            <code>25.50</code>, <code>14.00</code>, <code>10.00</code>, <code>0.00</code>.
        price_without_vat:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
          readOnly: true
          description: Price of this customer group excluding VAT. Calculated automatically
            based on <code>price</code> and <code>vat_percentage</code>.
        vat:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
          readOnly: true
          description: Amount of VAT. Calculated automatically based on <code>price</code>
            and </code>price_without_vat</code>.
      required:
      - price_group
      - price_without_vat
      - vat
      description: Customer group selection with concrete pricing for a registration.
    RegistrationUserAccess:
      type: object
      properties:
        id:
          type: integer
          nullable: true
          description: Unique identifier for this registration user access.
        email:
          type: string
          format: email
          title: E-mail
          maxLength: 254
          description: Email address of the registration user. Unique per registration.
            Must end with one of the allowed domain names if <code>is_substitute_user<code>
            is set to <code>true</code> (by default, only "hel.fi" domain is allowed).
        language:
          type: string
          nullable: true
          description: The registration user's service language that should be used
            in invitation emails.
          example: fi
        is_substitute_user:
          type: boolean
          description: Determines if the registration user is a substitute user for
            the creator of the registration. A substitute user has full administration
            rights for the registration. The registration user's email must end with
            an allowed domain name to be able to set this to <code>true</code>. By
            default, only "hel.fi" domain is allowed.
      required:
      - email
      description: List of email addresses which has registration specific permissions.
        Substitute user permissions are also given through a registration user access.
    RegistrationUserAccessCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          title: E-mail
          maxLength: 254
        language:
          type: string
          nullable: true
        is_substitute_user:
          type: boolean
      required:
      - email
    RegistrationWebStoreAccount:
      type: object
      properties:
        account:
          type: integer
        name:
          type: string
          readOnly: true
        company_code:
          type: string
          title: SAP company code
          maxLength: 4
        main_ledger_account:
          type: string
          maxLength: 6
        balance_profit_center:
          type: string
          maxLength: 10
        internal_order:
          type: string
          maxLength: 10
        profit_center:
          type: string
          maxLength: 7
        project:
          type: string
          maxLength: 16
        operation_area:
          type: string
          title: SAP functional area
          maxLength: 6
      required:
      - account
      - balance_profit_center
      - company_code
      - main_ledger_account
      - name
    RegistrationWebStoreMerchant:
      type: object
      properties:
        merchant:
          type: integer
      required:
      - merchant
    SeatReservationCode:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: Unique identifier for this seats reservation.
        registration:
          type: integer
          description: Id of the registration for which the seats are reserved for.
        seats:
          type: integer
          description: The number of reserved seats.
        in_waitlist:
          type: boolean
          readOnly: true
          description: Tells if the seats are reserved to the waitlist.
        code:
          type: string
          format: uuid
          readOnly: true
          description: Reservation code which is used when signing to the registration.
          example: d380965a-52ad-4e75-be6f-6588454697b7
        timestamp:
          type: string
          format: date-time
          readOnly: true
          description: Time when the reservation was created.
          example: '2024-06-13T07:29:25.880792Z'
        expiration:
          type: string
          format: date-time
          readOnly: true
          description: Time when the reservation expires.
          example: '2024-06-13T07:29:25.880792Z'
      required:
      - code
      - expiration
      - id
      - in_waitlist
      - registration
      - seats
      - timestamp
      description: Seats reservation are used to reserve seats for a registration.
    SignUp:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for this attendee.
        anonymization_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        first_name:
          type: string
          nullable: true
          maxLength: 50
          description: Attendee's first name
        last_name:
          type: string
          nullable: true
          maxLength: 50
          description: Attendee's last name.
        date_of_birth:
          type: string
          format: date
          nullable: true
          description: Attendee's date of birth.
        phone_number:
          type: string
          nullable: true
          maxLength: 18
        city:
          type: string
          nullable: true
          maxLength: 50
          description: Attendee's city.
        attendee_status:
          enum:
          - waitlisted
          - attending
          type: string
          description: Status of the attendee. Options are "attending" and "waitlisted".
          x-spec-enum-id: 7c3e1c23851886f6
        street_address:
          type: string
          nullable: true
          maxLength: 500
          description: Attendee's street address.
        zipcode:
          type: string
          nullable: true
          title: ZIP code
          maxLength: 10
          description: Attendee's postal code.
        presence_status:
          enum:
          - not_present
          - present
          type: string
          description: Event presence status of the attendee. Options are "present"
            and "not_present".
          x-spec-enum-id: 56820ccd00519380
        registration:
          type: integer
          description: Id of the registration to which this signup is related.
        signup_group:
          type: integer
          nullable: true
        user_consent:
          type: boolean
        contact_person:
          allOf:
          - $ref: '#/components/schemas/SignUpContactPerson'
          nullable: true
        extra_info:
          type: string
          description: Extra information about the attendee.
        has_contact_person_access:
          type: boolean
          readOnly: true
        is_created_by_current_user:
          type: boolean
          readOnly: true
        created_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this signup was created.
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this signup was last modified.
        created_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that created this signup (user endpoint).
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that last modified this signup (user
            endpoint).
        price_group:
          allOf:
          - $ref: '#/components/schemas/SignUpPriceGroup'
          nullable: true
        create_payment:
          type: boolean
          writeOnly: true
        payment:
          allOf:
          - $ref: '#/components/schemas/SignUpPayment'
          readOnly: true
        payment_refund:
          allOf:
          - $ref: '#/components/schemas/SignUpPaymentRefund'
          readOnly: true
        payment_cancellation:
          allOf:
          - $ref: '#/components/schemas/SignUpPaymentCancellation'
          readOnly: true
      required:
      - created_by
      - created_time
      - has_contact_person_access
      - is_created_by_current_user
      - last_modified_by
      - last_modified_time
      - registration
      description: Signups are used as attendees for registrations. An attendee can
        have their own contact person information if they are not part of a group.
    SignUpContactPerson:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: Unique identifier for this contact person.
        first_name:
          type: string
          nullable: true
          maxLength: 50
          description: Contact person's first name.
        last_name:
          type: string
          nullable: true
          maxLength: 50
          description: Contact person's last name.
        email:
          type: string
          format: email
          nullable: true
          title: E-mail
          maxLength: 254
          description: Contact person's email address.
        phone_number:
          type: string
          nullable: true
          maxLength: 18
          description: Contact person's phone number.
          example: '+358441234567'
        native_language:
          type: string
          nullable: true
          description: Contact person's native language.
          example: fi
        service_language:
          type: string
          description: Contact person's service language.
          example: fi
        membership_number:
          type: string
          nullable: true
          maxLength: 50
          description: Contact person's membership number.
        notifications:
          enum:
          - none
          - sms
          - email
          - sms and email
          type: string
          description: Methods to send notifications to the contact person. Options
            are <code>none</code>, <code>sms</code>, <code>email</code>, <code>sms
            and email</code>.
          x-spec-enum-id: df7b82d3dde0a957
          title: Notification type
          example: sms and email
      required:
      - id
      description: Provides contact information for an attendee or an attendee group.
        In case of a group, the information will be shared for the whole group.
    SignUpGroup:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: Unique identifier for this signup group.
        registration:
          type: integer
          description: Id of the registration to which this signup group is related.
        signups:
          type: array
          items:
            $ref: '#/components/schemas/GroupSignUp'
          description: The list of attendees belonging to this signup group.
        anonymization_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when the signup group was anonymized.
        contact_person:
          allOf:
          - $ref: '#/components/schemas/SignUpContactPerson'
          nullable: true
        extra_info:
          type: string
          description: Extra information about the group.
        has_contact_person_access:
          type: boolean
          readOnly: true
        is_created_by_current_user:
          type: boolean
          readOnly: true
        created_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this signup group was created.
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this signup group was last modified.
        created_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that created this signup group (user
            endpoint).
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that last modified this signup group
            (user endpoint).
        payment:
          allOf:
          - $ref: '#/components/schemas/SignUpPayment'
          readOnly: true
        payment_refund:
          allOf:
          - $ref: '#/components/schemas/SignUpPaymentRefund'
          readOnly: true
        payment_cancellation:
          allOf:
          - $ref: '#/components/schemas/SignUpPaymentCancellation'
          readOnly: true
      required:
      - created_by
      - created_time
      - has_contact_person_access
      - id
      - is_created_by_current_user
      - last_modified_by
      - last_modified_time
      - registration
      description: Signup groups are used as attendee groups for registrations.
    SignUpGroupCreate:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        registration:
          type: integer
        reservation_code:
          type: string
          writeOnly: true
        signups:
          type: array
          items:
            $ref: '#/components/schemas/GroupSignUpCreate'
        anonymization_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        contact_person:
          $ref: '#/components/schemas/SignUpContactPerson'
        extra_info:
          type: string
        has_contact_person_access:
          type: boolean
          readOnly: true
        is_created_by_current_user:
          type: boolean
          readOnly: true
        created_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created_by:
          type: string
          readOnly: true
          nullable: true
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
        create_payment:
          type: boolean
          writeOnly: true
        payment:
          allOf:
          - $ref: '#/components/schemas/SignUpPayment'
          readOnly: true
      required:
      - anonymization_time
      - contact_person
      - created_by
      - created_time
      - has_contact_person_access
      - id
      - is_created_by_current_user
      - last_modified_by
      - last_modified_time
      - payment
      - registration
      - reservation_code
      - signups
      description: Payload which is to used to create a signup group to a registration.
    SignUpPayment:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          description: Unique identifier for this payment.
        signup_group:
          type: integer
          writeOnly: true
          nullable: true
        signup:
          type: integer
          writeOnly: true
          nullable: true
        external_order_id:
          type: string
          nullable: true
          maxLength: 64
          description: Unique identified for this payment in the Talpa web store.
            Returned by the web store after the payment has been successfully created.
        checkout_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
          description: URL to Talpa web store's checkout UI. Does not require the
            user to be logged in. The payment can be paid using either checkout_url
            or logged_in_checkout_url.
        logged_in_checkout_url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
          description: URL to Talpa web store's checkout UI. Requires the user to
            be logged in. The payment can be paid using either checkout_url or logged_in_checkout_url.
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
          description: Amount of the payment with VAT included.
        status:
          enum:
          - created
          - paid
          - cancelled
          - refunded
          - expired
          type: string
          description: Status of the payment. Possible values are <code>created</code>,
            <code>paid</code>, <code>cancelled</code>, <code>refunded</code>, <code>expired</code>.
          x-spec-enum-id: 811bb4464bab5289
          title: Payment status
        created_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this payment was created.
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
          description: Time when this payment was last modified.
        created_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that created this payment (user endpoint).
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
          description: URL reference to the user that last modified this payment (user
            endpoint).
      required:
      - amount
      - created_by
      - created_time
      - id
      - last_modified_by
      - last_modified_time
      description: A payment created for a signup or a signup group using the web
        store integration. A signup is confirmed only when the payment is paid.
    SignUpPaymentCancellation:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        payment:
          type: integer
        created_time:
          type: string
          format: date-time
          readOnly: true
          title: Created at
      required:
      - created_time
      - id
      - payment
    SignUpPaymentRefund:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
        payment:
          type: integer
        external_refund_id:
          type: string
          maxLength: 64
        created_time:
          type: string
          format: date-time
          readOnly: true
          title: Created at
      required:
      - amount
      - created_time
      - external_refund_id
      - id
      - payment
    SignUpPriceGroup:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        registration_price_group:
          type: integer
          description: ID of one of the registration's available customer group selections.
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
          readOnly: true
        vat_percentage:
          type: string
          format: decimal
          pattern: ^-?\d{0,2}(?:\.\d{0,2})?$
          readOnly: true
        price_without_vat:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
          readOnly: true
        vat:
          type: string
          format: decimal
          pattern: ^-?\d{0,17}(?:\.\d{0,2})?$
          readOnly: true
      required:
      - id
      - price
      - price_without_vat
      - registration_price_group
      - vat
      - vat_percentage
      description: Customer group selection for an attendee. Determines the price
        of the signup.
    User:
      type: object
      properties:
        last_login:
          type: string
          format: date-time
          nullable: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        date_joined:
          type: string
          format: date-time
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        uuid:
          type: string
          format: uuid
        department_name:
          type: string
          nullable: true
          maxLength: 50
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        display_name:
          type: string
          readOnly: true
        is_external:
          type: boolean
          readOnly: true
        is_strongly_identified:
          type: boolean
          description: Check if the user is strongly identified
          readOnly: true
        is_substitute_user:
          type: boolean
          readOnly: true
      required:
      - display_name
      - is_external
      - is_strongly_identified
      - is_substitute_user
      - username
      - uuid
      - is_staff
      - is_superuser
    Video:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
          description: Name describing contents of the video.
        url:
          type: string
          format: uri
          maxLength: 200
          description: URL to the video.
        alt_text:
          type: string
          nullable: true
          maxLength: 320
          description: The video alt text.
      required:
      - url
      description: Links to videos that the event publisher considers related to this
        event.
    WebStoreAccount:
      type: object
      properties:
        id:
          type: integer
        active:
          type: boolean
          title: Is active
        name:
          type: string
          maxLength: 255
        company_code:
          type: string
          title: SAP company code
          maxLength: 4
        main_ledger_account:
          type: string
          maxLength: 6
        balance_profit_center:
          type: string
          maxLength: 10
        internal_order:
          type: string
          maxLength: 10
        profit_center:
          type: string
          maxLength: 7
        project:
          type: string
          maxLength: 16
        operation_area:
          type: string
          title: SAP functional area
          maxLength: 6
        created_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created_by:
          type: string
          readOnly: true
          nullable: true
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
      required:
      - balance_profit_center
      - company_code
      - created_by
      - created_time
      - last_modified_by
      - last_modified_time
      - main_ledger_account
      - name
    WebStoreMerchant:
      type: object
      properties:
        id:
          type: integer
        active:
          type: boolean
          title: Is active
        name:
          type: string
          maxLength: 100
        street_address:
          type: string
          maxLength: 500
        zipcode:
          type: string
          title: ZIP code
          maxLength: 10
        city:
          type: string
          maxLength: 50
        email:
          type: string
          format: email
          title: E-mail
          maxLength: 254
        phone_number:
          type: string
          maxLength: 18
        url:
          type: string
          format: uri
          readOnly: true
        terms_of_service_url:
          type: string
          format: uri
          maxLength: 200
        business_id:
          type: string
          maxLength: 9
        paytrail_merchant_id:
          type: string
          maxLength: 100
        merchant_id:
          type: string
          readOnly: true
        created_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_modified_time:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        created_by:
          type: string
          readOnly: true
          nullable: true
        last_modified_by:
          type: string
          readOnly: true
          nullable: true
      required:
      - business_id
      - city
      - created_by
      - created_time
      - email
      - last_modified_by
      - last_modified_time
      - merchant_id
      - name
      - paytrail_merchant_id
      - phone_number
      - street_address
      - terms_of_service_url
      - url
      - zipcode
  securitySchemes:
    Apikey:
      type: apiKey
      in: header
      name: apikey
      description: Apikey authentication for trusted data sources. Issued by Linked
        Events.
    Helsinki-tunnistus Keycloak:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT issued by Helsinki-tunnistus.
servers:
- url: https://api.hel.fi/linkedevents/v1/
- url: https://linkedevents.api.stage.hel.ninja/v1/
- url: https://linkedevents.api.test.hel.ninja/v1/
- url: https://linkedevents.api.dev.hel.ninja/v1/
tags:
- name: event
  description: Search and edit events
- name: search
  description: Fulltext search through events and places
- name: image
  description: Get and upload images
- name: keyword
  description: Search and edit keywords
- name: keyword_set
  description: Search and edit keyword sets
- name: organization
  description: Search and edit organizations
- name: place
  description: Search and edit places
- name: language
  description: Get supported languages
- name: data_source
  description: Get supported data sources
- name: organization_class
  description: Get supported organization classes
- name: registration
  description: Search and edit registrations
- name: registration_user_access
  description: Send invitation email to registration user
- name: seats_reservation
  description: Create and edit seats reservations
- name: signup
  description: Search and edit signups
- name: signup_group
  description: Search and edit signup groups
- name: user
  description: Get users
- name: price_group
  description: Create, edit and search customer group selections
